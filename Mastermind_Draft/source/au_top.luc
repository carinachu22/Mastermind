module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]    // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig switch_state;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond[4];
    edge_detector buttondetector[4](#RISE(1), #FALL(0));
    
    .rst(rst) {
      phaseTwo_fsm man; // whole flow in fsm_draft, isolated error in fsm_fixed_error
      multi_seven_seg seg;
      fsm test_mode = {IDLE, MANUAL}; // AUTOMATIC
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    buttoncond.in = io_button[3:0];
    buttondetector.in = buttoncond.out;
    switch_state = buttondetector.out[0];
    man.confirm_button=buttondetector.out[1];
    man.colour_button=buttondetector.out[2];
    man.trigger_start = b0;
    man.dips = 16b0;
    
    // welcome messsage
    seg.values = {5d0, 5d0, 5d14, 5d1};
    
    // Top-level FSM for testing
    case (test_mode.q) {
      test_mode.IDLE:
        
        if (switch_state) {
          test_mode.d = test_mode.MANUAL;
        }
      
      test_mode.MANUAL:
        man.dips[7:0] = io_dip[0];
        man.dips[15:8] = io_dip[1];
        man.trigger_start = buttondetector.out[1];
        
        seg.values = man.seg_out;
        io_led[1] = man.out[15:8]; // show last 8 bits of result
        io_led[0] = man.out[7:0];
        
        if (switch_state) {
          test_mode.d = test_mode.IDLE;
        }
      
    }
    
    io_seg = ~seg.seg; //seg_msg
    io_sel = ~seg.sel;
  }
}