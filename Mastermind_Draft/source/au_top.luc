module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input inbutton [2],     // CUSTOM Button
    output outled [16]       // CUSTOM LED strip
    //output outseg [8],      // CUSTOM 7-seg
    //output outsel [4]      // CUSTOM 7-seg
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond[2];
    edge_detector buttondetector[2](#RISE(1), #FALL(0));
    
    .rst(rst) {
      control_fsm man;
      multi_seven_seg seg;
      //led_tester led_test;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    //io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    /* Condition custom buttons */
    buttoncond.in = inbutton;
    buttondetector.in = buttoncond.out;
    
    //outseg = seg.seg;
    //outsel = seg.sel;
    
    /* FSM Buttons DEFAULT */
    man.confirm_button= b0;
    man.colour_button= b0;
    
    /* HI MESSAGE */
    seg.values = {5d0, 5d0, 5d14, 5d1};

    /* Set FSM inputs (custom buttons) */
    man.confirm_button = buttondetector.out[0];
    man.colour_button = buttondetector.out[1];
       
    /* Set FSM outputs (custom LED strips and 7-segment) */
    outled[15:0] = man.outled;                
    seg.values = man.seg_out;
      
    /* Set LED TESTER inputs*/
    //led_test.updating = 16b1111111111111111;
    //led_test.encoding = 16b0010001000100010;
    //outled = led_test.led_strip;
    
    // DEBUG
    //io_led[1] = man.out[15:8];
    //io_led[0] = man.out[7:0];
    
    io_seg = ~seg.seg; //seg_msg
    io_sel = ~seg.sel;
  }
}