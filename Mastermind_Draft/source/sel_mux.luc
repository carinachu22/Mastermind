module sel_mux (
    input ra_data[16],
    input rb_data[16],
    input alu_data[16],
    input asel_signal[3],
    input bsel_signal[4],
    input wdsel_signal[2],
    output asel_out[16],
    output bsel_out[16],
    output wdsel_out[16]
  ) {

  always {
  
    // INITIALIZE
    asel_out = 16b0;
    bsel_out = 16b0;
    wdsel_out = 16b0;
    
    //ASEL MULTIPLEXER
    case(asel_signal){
      b00 : asel_out = ra_data;
      b01 : asel_out = 16b1;
      b10 : asel_out = 16b0; 
      b11: asel_out = 16b10;
      b100: asel_out = 16b1000; // change this to the guess attempt representation in 16bits
      b101: asel_out = 16b0010001000100010;
      b110: asel_out = 16b1111000000000000; //XOR helper init
      b111: asel_out = 16h8000;
      default : asel_out = ra_data;
    }
    
    //BSEL MULTIPLEXER
    case(bsel_signal){
      b000 : bsel_out = rb_data;
      b001 : bsel_out = 16b0; 
      b010 : bsel_out = 16b1; 
      b011 : bsel_out = 16b11;
      b100 : bsel_out = 16b100; 
      b101 : bsel_out = 16b101; 
      b110 : bsel_out = 16b110;
      b111 : bsel_out = 16b111;
      b1000: bsel_out = 16b1000;
      b1100: bsel_out = 16b1100; //12 
      b1110: bsel_out = 16b1111111111111111; //all 1s for XOR operation 
      default : bsel_out = rb_data;
    }
    
    //WDSEL MULTIPLEXER
    case(wdsel_signal){
      b00 : wdsel_out = alu_data;
      b01 : wdsel_out = 16hFFF;
      b10 : wdsel_out = 16h000;
    }
  }
}