/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module phaseTwo_fsm_4 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    input colour_button,
    input confirm_button,
    output reg [15:0] out,
    output reg [19:0] seg_out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  wire [16-1:0] M_alu16_a_data;
  wire [16-1:0] M_alu16_b_data;
  wire [6-1:0] M_alu16_aluop_signal;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn),
    .a_data(M_alu16_a_data),
    .b_data(M_alu16_b_data),
    .aluop_signal(M_alu16_aluop_signal)
  );
  
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [16-1:0] M_regfile_data;
  wire [4-1:0] M_regfile_ra_addr;
  wire [4-1:0] M_regfile_rb_addr;
  wire [16-1:0] M_regfile_rc_data;
  wire [1-1:0] M_regfile_we_signal;
  reg [4-1:0] M_regfile_ra;
  reg [4-1:0] M_regfile_rb;
  reg [4-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wr_data;
  regfile_8 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .wr_data(M_regfile_wr_data),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .data(M_regfile_data),
    .ra_addr(M_regfile_ra_addr),
    .rb_addr(M_regfile_rb_addr),
    .rc_data(M_regfile_rc_data),
    .we_signal(M_regfile_we_signal)
  );
  
  wire [16-1:0] M_sel_mux_asel_out;
  wire [16-1:0] M_sel_mux_bsel_out;
  wire [16-1:0] M_sel_mux_wdsel_out;
  reg [16-1:0] M_sel_mux_ra_data;
  reg [16-1:0] M_sel_mux_rb_data;
  reg [16-1:0] M_sel_mux_alu_data;
  reg [2-1:0] M_sel_mux_asel_signal;
  reg [3-1:0] M_sel_mux_bsel_signal;
  reg [2-1:0] M_sel_mux_wdsel_signal;
  sel_mux_9 sel_mux (
    .ra_data(M_sel_mux_ra_data),
    .rb_data(M_sel_mux_rb_data),
    .alu_data(M_sel_mux_alu_data),
    .asel_signal(M_sel_mux_asel_signal),
    .bsel_signal(M_sel_mux_bsel_signal),
    .wdsel_signal(M_sel_mux_wdsel_signal),
    .asel_out(M_sel_mux_asel_out),
    .bsel_out(M_sel_mux_bsel_out),
    .wdsel_out(M_sel_mux_wdsel_out)
  );
  
  wire [1-1:0] M_slow_clock_value;
  counter_10 slow_clock (
    .clk(clk),
    .rst(rst),
    .value(M_slow_clock_value)
  );
  
  wire [1-1:0] M_slow_edge_out;
  reg [1-1:0] M_slow_edge_in;
  edge_detector_3 slow_edge (
    .clk(clk),
    .in(M_slow_edge_in),
    .out(M_slow_edge_out)
  );
  
  
  localparam IDLE_phase_two = 3'd0;
  localparam POSITION_phase_two = 3'd1;
  localparam BRANCHCOLOURINDEX_phase_two = 3'd2;
  localparam INCREASECOLOURINDEX_phase_two = 3'd3;
  localparam BACKTOFIRSTCOLOURINDEX_phase_two = 3'd4;
  localparam FINISH_phase_two = 3'd5;
  
  reg [2:0] M_phase_two_d, M_phase_two_q = IDLE_phase_two;
  
  always @* begin
    M_phase_two_d = M_phase_two_q;
    
    M_regfile_ra = 4'h0;
    M_regfile_rb = 4'h0;
    M_regfile_rc = 4'h0;
    M_regfile_we = 1'h0;
    M_regfile_wr_data = 1'h0;
    M_sel_mux_asel_signal = 2'h0;
    M_sel_mux_bsel_signal = 3'h0;
    M_sel_mux_wdsel_signal = 2'h0;
    M_sel_mux_ra_data = M_regfile_ra_data;
    M_sel_mux_rb_data = M_regfile_rb_data;
    M_alu16_a = M_sel_mux_asel_out;
    M_alu16_b = M_sel_mux_bsel_out;
    M_alu16_alufn_signal = 6'h00;
    M_sel_mux_alu_data = M_alu16_out;
    out = 16'h0000;
    seg_out = 20'h00000;
    M_slow_edge_in = M_slow_clock_value;
    
    case (M_phase_two_q)
      IDLE_phase_two: begin
        if (trigger_start == 1'h1) begin
          M_phase_two_d = POSITION_phase_two;
        end
      end
      POSITION_phase_two: begin
        seg_out = 20'h04c12;
        if (colour_button) begin
          M_phase_two_d = BRANCHCOLOURINDEX_phase_two;
        end
      end
      BRANCHCOLOURINDEX_phase_two: begin
        seg_out = 20'h02d81;
        M_regfile_ra = 4'h2;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h5;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h35;
        if (M_sel_mux_wdsel_out && M_slow_edge_out) begin
          M_phase_two_d = INCREASECOLOURINDEX_phase_two;
        end else begin
          if (M_slow_edge_out) begin
            M_phase_two_d = BACKTOFIRSTCOLOURINDEX_phase_two;
          end
        end
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
      end
      INCREASECOLOURINDEX_phase_two: begin
        seg_out = 20'h00581;
        M_regfile_ra = 4'h2;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'h2;
        M_regfile_we = 1'h1;
        if (confirm_button) begin
          M_phase_two_d = FINISH_phase_two;
        end
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
      end
      BACKTOFIRSTCOLOURINDEX_phase_two: begin
        seg_out = 20'h5c581;
        if (confirm_button) begin
          M_phase_two_d = FINISH_phase_two;
        end
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
      end
      FINISH_phase_two: begin
        seg_out = 20'h8864e;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_phase_two_q <= 1'h0;
    end else begin
      M_phase_two_q <= M_phase_two_d;
    end
  end
  
endmodule
