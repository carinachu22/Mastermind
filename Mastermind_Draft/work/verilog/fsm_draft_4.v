/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_draft_4 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    output reg [15:0] out,
    output reg [19:0] seg_out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn)
  );
  
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [16-1:0] M_regfile_data;
  wire [4-1:0] M_regfile_ra_addr;
  wire [4-1:0] M_regfile_rb_addr;
  wire [16-1:0] M_regfile_rc_data;
  reg [4-1:0] M_regfile_ra;
  reg [4-1:0] M_regfile_rb;
  reg [4-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wr_data;
  regfile_8 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .wr_data(M_regfile_wr_data),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .data(M_regfile_data),
    .ra_addr(M_regfile_ra_addr),
    .rb_addr(M_regfile_rb_addr),
    .rc_data(M_regfile_rc_data)
  );
  
  wire [16-1:0] M_sel_mux_asel_out;
  wire [16-1:0] M_sel_mux_bsel_out;
  wire [16-1:0] M_sel_mux_wdsel_out;
  reg [16-1:0] M_sel_mux_ra_data;
  reg [16-1:0] M_sel_mux_rb_data;
  reg [16-1:0] M_sel_mux_alu_data;
  reg [2-1:0] M_sel_mux_asel_signal;
  reg [3-1:0] M_sel_mux_bsel_signal;
  reg [2-1:0] M_sel_mux_wdsel_signal;
  sel_mux_9 sel_mux (
    .ra_data(M_sel_mux_ra_data),
    .rb_data(M_sel_mux_rb_data),
    .alu_data(M_sel_mux_alu_data),
    .asel_signal(M_sel_mux_asel_signal),
    .bsel_signal(M_sel_mux_bsel_signal),
    .wdsel_signal(M_sel_mux_wdsel_signal),
    .asel_out(M_sel_mux_asel_out),
    .bsel_out(M_sel_mux_bsel_out),
    .wdsel_out(M_sel_mux_wdsel_out)
  );
  
  wire [1-1:0] M_slow_clock_value;
  counter_10 slow_clock (
    .clk(clk),
    .rst(rst),
    .value(M_slow_clock_value)
  );
  
  wire [1-1:0] M_slow_edge_out;
  reg [1-1:0] M_slow_edge_in;
  edge_detector_3 slow_edge (
    .clk(clk),
    .in(M_slow_edge_in),
    .out(M_slow_edge_out)
  );
  
  
  localparam GETGUESS_phase_three = 4'd0;
  localparam GETCODE_phase_three = 4'd1;
  localparam CHECKGUESS_CORRCODE_phase_three = 4'd2;
  localparam SHIFTHINTRED_phase_three = 4'd3;
  localparam UPDATEHINTRED_phase_three = 4'd4;
  localparam CHANGEGUESSHELPERDEFAULT_phase_three = 4'd5;
  localparam SHIFTCODEHELPER_phase_three = 4'd6;
  localparam CHECKCODEHELPER_phase_three = 4'd7;
  localparam GETNEXTCODE_phase_three = 4'd8;
  localparam SHIFTTEMPGUESS_phase_three = 4'd9;
  localparam CHECKTEMPGUESS_TEMPCODE_phase_three = 4'd10;
  localparam SHIFTHINTWHITE_phase_three = 4'd11;
  localparam UPDATEHINTWHIITE_phase_three = 4'd12;
  
  reg [3:0] M_phase_three_d, M_phase_three_q = GETGUESS_phase_three;
  
  always @* begin
    M_phase_three_d = M_phase_three_q;
    
    M_regfile_ra = 4'h0;
    M_regfile_rb = 4'h0;
    M_regfile_rc = 4'h0;
    M_regfile_we = 1'h0;
    M_regfile_wr_data = 1'h0;
    M_sel_mux_asel_signal = 2'h0;
    M_sel_mux_bsel_signal = 3'h0;
    M_sel_mux_wdsel_signal = 2'h0;
    M_sel_mux_ra_data = M_regfile_ra_data;
    M_sel_mux_rb_data = M_regfile_rb_data;
    M_alu16_a = M_sel_mux_asel_out;
    M_alu16_b = M_sel_mux_bsel_out;
    M_alu16_alufn_signal = 6'h00;
    M_sel_mux_alu_data = M_alu16_out;
    out = 16'h0000;
    seg_out = 20'h00000;
    M_slow_edge_in = M_slow_clock_value;
    
    case (M_phase_three_q)
      GETGUESS_phase_three: begin
        seg_out = 20'h00001;
        M_regfile_ra = 4'h7;
        M_regfile_rb = 4'h8;
        M_regfile_rc = 4'hb;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GETCODE_phase_three;
        end
      end
      GETCODE_phase_three: begin
        seg_out = 20'h00002;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_regfile_rc = 4'ha;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GETCODE_phase_three;
        end
      end
      CHECKGUESS_CORRCODE_phase_three: begin
        seg_out = 20'h00003;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h33;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'hffff) begin
            M_phase_three_d = SHIFTHINTRED_phase_three;
          end else begin
            M_phase_three_d = SHIFTCODEHELPER_phase_three;
          end
        end
      end
      SHIFTHINTRED_phase_three: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEHINTRED_phase_three;
        end
      end
      UPDATEHINTRED_phase_three: begin
        seg_out = 20'h055d4;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h3;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHANGEGUESSHELPERDEFAULT_phase_three;
        end
      end
      CHANGEGUESSHELPERDEFAULT_phase_three: begin
        seg_out = 20'h031cf;
        M_regfile_ra = 4'h8;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h8;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHANGEGUESSHELPERDEFAULT_phase_three;
        end
      end
      SHIFTCODEHELPER_phase_three: begin
        seg_out = 20'h0498e;
        M_regfile_ra = 4'h6;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h6;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHECKCODEHELPER_phase_three;
        end
      end
      CHECKCODEHELPER_phase_three: begin
        seg_out = 20'h0318e;
        M_regfile_ra = 4'h6;
        M_regfile_rb = 4'h8;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h33;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'hffff) begin
            M_phase_three_d = CHANGEGUESSHELPERDEFAULT_phase_three;
          end else begin
            M_phase_three_d = GETNEXTCODE_phase_three;
          end
        end
      end
      GETNEXTCODE_phase_three: begin
        seg_out = 20'h00002;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_regfile_rc = 4'ha;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = SHIFTTEMPGUESS_phase_three;
        end
      end
      SHIFTTEMPGUESS_phase_three: begin
        seg_out = 20'h00012;
        M_regfile_ra = 4'hb;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'hb;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHECKTEMPGUESS_TEMPCODE_phase_three;
        end
      end
      CHECKTEMPGUESS_TEMPCODE_phase_three: begin
        seg_out = 20'h0300c;
        M_regfile_ra = 4'ha;
        M_regfile_rb = 4'hb;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h33;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'hffff) begin
            M_phase_three_d = SHIFTHINTWHITE_phase_three;
          end else begin
            M_phase_three_d = SHIFTCODEHELPER_phase_three;
          end
        end
      end
      SHIFTHINTWHITE_phase_three: begin
        seg_out = 20'h049c1;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEHINTWHIITE_phase_three;
        end
      end
      UPDATEHINTWHIITE_phase_three: begin
        seg_out = 20'h055c1;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_wr_data = M_sel_mux_wdsel_out;
        
        case (dips)
          16'h0000: begin
            out = M_regfile_ra_data;
          end
          16'h0001: begin
            out = M_regfile_rb_data;
          end
          16'h0002: begin
            out = M_regfile_rc_data;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHANGEGUESSHELPERDEFAULT_phase_three;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_phase_three_q <= 1'h0;
    end else begin
      M_phase_three_q <= M_phase_three_d;
    end
  end
  
endmodule
