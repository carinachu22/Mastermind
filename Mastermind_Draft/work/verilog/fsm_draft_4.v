/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_draft_4 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    output reg [15:0] out,
    output reg [19:0] seg_out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  wire [16-1:0] M_alu16_a_data;
  wire [16-1:0] M_alu16_b_data;
  wire [6-1:0] M_alu16_aluop_signal;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn),
    .a_data(M_alu16_a_data),
    .b_data(M_alu16_b_data),
    .aluop_signal(M_alu16_aluop_signal)
  );
  
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [16-1:0] M_regfile_data;
  wire [4-1:0] M_regfile_ra_addr;
  wire [4-1:0] M_regfile_rb_addr;
  wire [16-1:0] M_regfile_rc_data;
  wire [1-1:0] M_regfile_we_signal;
  reg [4-1:0] M_regfile_ra;
  reg [4-1:0] M_regfile_rb;
  reg [4-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wr_data;
  regfile_8 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .wr_data(M_regfile_wr_data),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .data(M_regfile_data),
    .ra_addr(M_regfile_ra_addr),
    .rb_addr(M_regfile_rb_addr),
    .rc_data(M_regfile_rc_data),
    .we_signal(M_regfile_we_signal)
  );
  
  wire [16-1:0] M_sel_mux_asel_out;
  wire [16-1:0] M_sel_mux_bsel_out;
  wire [16-1:0] M_sel_mux_wdsel_out;
  reg [16-1:0] M_sel_mux_ra_data;
  reg [16-1:0] M_sel_mux_rb_data;
  reg [16-1:0] M_sel_mux_alu_data;
  reg [2-1:0] M_sel_mux_asel_signal;
  reg [3-1:0] M_sel_mux_bsel_signal;
  reg [2-1:0] M_sel_mux_wdsel_signal;
  sel_mux_9 sel_mux (
    .ra_data(M_sel_mux_ra_data),
    .rb_data(M_sel_mux_rb_data),
    .alu_data(M_sel_mux_alu_data),
    .asel_signal(M_sel_mux_asel_signal),
    .bsel_signal(M_sel_mux_bsel_signal),
    .wdsel_signal(M_sel_mux_wdsel_signal),
    .asel_out(M_sel_mux_asel_out),
    .bsel_out(M_sel_mux_bsel_out),
    .wdsel_out(M_sel_mux_wdsel_out)
  );
  
  
  localparam IDLE_phase_three = 6'd0;
  localparam GETGUESS_phase_three = 6'd1;
  localparam GETCODE_phase_three = 6'd2;
  localparam CHECKGUESS_CORRCODE_phase_three = 6'd3;
  localparam SHIFTHINTRED_phase_three = 6'd4;
  localparam UPDATEHINTRED_phase_three = 6'd5;
  localparam SHIFTGUESSHELPERDEFAULT_phase_three = 6'd6;
  localparam UPDATEGUESSHELPERDEFAULT_phase_three = 6'd7;
  localparam SHIFTCODEHELPER_phase_three = 6'd8;
  localparam UPDATECODEHELPER_phase_three = 6'd9;
  localparam CHECKCODEHELPER_phase_three = 6'd10;
  localparam SHIFTNOHINT_phase_three = 6'd11;
  localparam UPDATENOHINT_phase_three = 6'd12;
  localparam GETNEXTCODE_phase_three = 6'd13;
  localparam SHIFTTEMPGUESS_phase_three = 6'd14;
  localparam UPDATETEMPGUESS_phase_three = 6'd15;
  localparam CHECKTEMPGUESS_TEMPCODE_phase_three = 6'd16;
  localparam SHIFTHINTWHITE_phase_three = 6'd17;
  localparam UPDATEHINTWHITE_phase_three = 6'd18;
  localparam SHIFTCODEHELPERDEFAULT_phase_three = 6'd19;
  localparam UPDATECODEHELPERDEFAULT_phase_three = 6'd20;
  localparam COMPARETEMPCOUNTER_phase_three = 6'd21;
  localparam ADDTEMPCOUNTER_phase_three = 6'd22;
  localparam UPDATETEMPCOUNTER_phase_three = 6'd23;
  localparam ADDIMPOSTER_phase_three = 6'd24;
  localparam UPDATEIMPOSTER_phase_three = 6'd25;
  localparam COMPARECODE_GUESS_phase_three = 6'd26;
  localparam SUBATTEMPTCOUNT_phase_three = 6'd27;
  localparam UPDATEATTEMPTCOUNT_phase_three = 6'd28;
  localparam BRANCHATTEMPTCOUNT_phase_three = 6'd29;
  localparam LOSE_phase_three = 6'd30;
  localparam WIN_phase_three = 6'd31;
  localparam GAMEOVER_phase_three = 6'd32;
  
  reg [5:0] M_phase_three_d, M_phase_three_q = IDLE_phase_three;
  
  always @* begin
    M_phase_three_d = M_phase_three_q;
    
    M_regfile_ra = 4'h0;
    M_regfile_rb = 4'h0;
    M_regfile_rc = 4'h0;
    M_regfile_we = 1'h0;
    M_regfile_wr_data = 1'h0;
    M_alu16_alufn_signal = 6'h00;
    M_sel_mux_asel_signal = 2'h0;
    M_sel_mux_bsel_signal = 3'h0;
    M_sel_mux_wdsel_signal = 2'h0;
    M_sel_mux_ra_data = M_regfile_ra_data;
    M_sel_mux_rb_data = M_regfile_rb_data;
    M_alu16_a = M_sel_mux_asel_out;
    M_alu16_b = M_sel_mux_bsel_out;
    M_sel_mux_alu_data = M_alu16_out;
    M_regfile_wr_data = M_sel_mux_wdsel_out;
    out = 16'h0000;
    seg_out = 20'h00000;
    
    case (M_phase_three_q)
      IDLE_phase_three: begin
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GETGUESS_phase_three;
        end
      end
      GETGUESS_phase_three: begin
        seg_out = 20'h00001;
        M_regfile_ra = 4'h7;
        M_regfile_rb = 4'h8;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 4'hb;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GETCODE_phase_three;
        end
      end
      GETCODE_phase_three: begin
        seg_out = 20'h00002;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 4'ha;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHECKGUESS_CORRCODE_phase_three;
        end
      end
      CHECKGUESS_CORRCODE_phase_three: begin
        seg_out = 20'h6318c;
        M_regfile_ra = 4'ha;
        M_regfile_rb = 4'hb;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_three_d = SHIFTHINTRED_phase_three;
          end else begin
            M_phase_three_d = SHIFTCODEHELPER_phase_three;
          end
        end
      end
      SHIFTHINTRED_phase_three: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h27;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEHINTRED_phase_three;
        end
      end
      UPDATEHINTRED_phase_three: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h3;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = SHIFTGUESSHELPERDEFAULT_phase_three;
        end
      end
      SHIFTCODEHELPER_phase_three: begin
        seg_out = 20'h0498e;
        M_regfile_ra = 4'h6;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h27;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATECODEHELPER_phase_three;
        end
      end
      UPDATECODEHELPER_phase_three: begin
        seg_out = 20'h0558e;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h6;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHECKCODEHELPER_phase_three;
        end
      end
      CHECKCODEHELPER_phase_three: begin
        seg_out = 20'h0318e;
        M_regfile_ra = 4'h6;
        M_regfile_rb = 4'h8;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_three_d = SHIFTNOHINT_phase_three;
          end else begin
            M_phase_three_d = GETNEXTCODE_phase_three;
          end
        end
      end
      SHIFTNOHINT_phase_three: begin
        seg_out = 20'h0000e;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h27;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATENOHINT_phase_three;
        end
      end
      UPDATENOHINT_phase_three: begin
        seg_out = 20'ha800e;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = SHIFTGUESSHELPERDEFAULT_phase_three;
        end
      end
      GETNEXTCODE_phase_three: begin
        seg_out = 20'h00003;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 4'ha;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = SHIFTTEMPGUESS_phase_three;
        end
      end
      SHIFTTEMPGUESS_phase_three: begin
        seg_out = 20'h00012;
        M_regfile_ra = 4'hb;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h27;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATETEMPGUESS_phase_three;
        end
      end
      UPDATETEMPGUESS_phase_three: begin
        seg_out = 20'h0540c;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 16'h001a;
        M_regfile_rc = 4'hb;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = CHECKTEMPGUESS_TEMPCODE_phase_three;
        end
      end
      CHECKTEMPGUESS_TEMPCODE_phase_three: begin
        seg_out = 20'h0300c;
        M_regfile_ra = 4'ha;
        M_regfile_rb = 4'hb;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_three_d = SHIFTHINTWHITE_phase_three;
          end else begin
            M_phase_three_d = SHIFTCODEHELPER_phase_three;
          end
        end
      end
      SHIFTHINTWHITE_phase_three: begin
        seg_out = 20'h049ce;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h27;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEHINTWHITE_phase_three;
        end
      end
      UPDATEHINTWHITE_phase_three: begin
        seg_out = 20'h029ce;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = SHIFTGUESSHELPERDEFAULT_phase_three;
        end
      end
      SHIFTGUESSHELPERDEFAULT_phase_three: begin
        seg_out = 20'h031cf;
        M_regfile_ra = 4'h8;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h21;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEGUESSHELPERDEFAULT_phase_three;
        end
      end
      UPDATEGUESSHELPERDEFAULT_phase_three: begin
        seg_out = 20'h055cf;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h8;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATECODEHELPERDEFAULT_phase_three;
        end
      end
      UPDATECODEHELPERDEFAULT_phase_three: begin
        seg_out = 20'h0318f;
        M_regfile_ra = 4'h8;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h6;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = COMPARETEMPCOUNTER_phase_three;
        end
      end
      COMPARETEMPCOUNTER_phase_three: begin
        seg_out = 20'h6302c;
        M_regfile_ra = 4'hc;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_three_d = ADDIMPOSTER_phase_three;
          end else begin
            M_phase_three_d = ADDTEMPCOUNTER_phase_three;
          end
        end
      end
      ADDTEMPCOUNTER_phase_three: begin
        seg_out = 20'h53180;
        M_regfile_ra = 4'hc;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATETEMPCOUNTER_phase_three;
        end
      end
      UPDATETEMPCOUNTER_phase_three: begin
        seg_out = 20'hab18c;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'hc;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GETGUESS_phase_three;
        end
      end
      ADDIMPOSTER_phase_three: begin
        seg_out = 20'h50421;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'hd;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1e;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEIMPOSTER_phase_three;
        end
      end
      UPDATEIMPOSTER_phase_three: begin
        seg_out = 20'ha8421;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = COMPARECODE_GUESS_phase_three;
        end
      end
      COMPARECODE_GUESS_phase_three: begin
        seg_out = 20'h6318c;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h7;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_three_d = WIN_phase_three;
          end else begin
            M_phase_three_d = SUBATTEMPTCOUNT_phase_three;
          end
        end
      end
      SUBATTEMPTCOUNT_phase_three: begin
        seg_out = 20'h5298c;
        M_regfile_ra = 4'h3;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h01;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = UPDATEATTEMPTCOUNT_phase_three;
        end
      end
      UPDATEATTEMPTCOUNT_phase_three: begin
        seg_out = 20'haa98c;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h3;
        M_regfile_we = 1'h1;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_phase_three_d = BRANCHATTEMPTCOUNT_phase_three;
        end
      end
      BRANCHATTEMPTCOUNT_phase_three: begin
        seg_out = 20'h5314c;
        M_regfile_ra = 4'h3;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h1;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        
        case (dips)
          16'h0000: begin
            out = M_alu16_a_data;
          end
          16'h0001: begin
            out = M_alu16_b_data;
          end
          16'h0003: begin
            out = M_alu16_aluop_signal;
          end
          16'h0004: begin
            out = M_alu16_out;
          end
          16'h0005: begin
            out = M_regfile_ra_data;
          end
          16'h0006: begin
            out = M_regfile_rb_data;
          end
          16'h0007: begin
            out = M_regfile_rc_data;
          end
          16'h0008: begin
            out = M_regfile_we_signal;
          end
          16'h0009: begin
            out = M_sel_mux_asel_out;
          end
          16'h000a: begin
            out = M_sel_mux_bsel_out;
          end
          16'h000b: begin
            out = M_sel_mux_wdsel_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_three_d = LOSE_phase_three;
          end else begin
            M_phase_three_d = IDLE_phase_three;
          end
        end
      end
      LOSE_phase_three: begin
        seg_out = 20'h8024d;
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GAMEOVER_phase_three;
        end
      end
      WIN_phase_three: begin
        seg_out = 20'h9aa52;
        if (trigger_start == 1'h1) begin
          M_phase_three_d = GAMEOVER_phase_three;
        end
      end
      GAMEOVER_phase_three: begin
        seg_out = 20'h8864e;
        if (trigger_start == 1'h1) begin
          M_phase_three_d = IDLE_phase_three;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_phase_three_q <= 1'h0;
    end else begin
      M_phase_three_q <= M_phase_three_d;
    end
  end
  
endmodule
