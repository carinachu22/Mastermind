/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_draft_1_debug_4 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    input colour_button,
    input confirm_button,
    output reg [15:0] out,
    output reg [19:0] seg_out,
    output reg [3:0] outled,
    output reg [19:0] debug__
  );
  
  
  
  integer index;
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  wire [16-1:0] M_alu16_a_data;
  wire [16-1:0] M_alu16_b_data;
  wire [6-1:0] M_alu16_aluop_signal;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_8 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn),
    .a_data(M_alu16_a_data),
    .b_data(M_alu16_b_data),
    .aluop_signal(M_alu16_aluop_signal)
  );
  
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [16-1:0] M_regfile_data;
  wire [4-1:0] M_regfile_ra_addr;
  wire [4-1:0] M_regfile_rb_addr;
  wire [4-1:0] M_regfile_rc_addr;
  wire [16-1:0] M_regfile_rc_data;
  wire [1-1:0] M_regfile_we_signal;
  wire [20-1:0] M_regfile_debug__;
  reg [4-1:0] M_regfile_ra;
  reg [4-1:0] M_regfile_rb;
  reg [4-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wr_data;
  regfile_2_debug_9 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .wr_data(M_regfile_wr_data),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .data(M_regfile_data),
    .ra_addr(M_regfile_ra_addr),
    .rb_addr(M_regfile_rb_addr),
    .rc_addr(M_regfile_rc_addr),
    .rc_data(M_regfile_rc_data),
    .we_signal(M_regfile_we_signal),
    .debug__(M_regfile_debug__)
  );
  
  wire [16-1:0] M_sel_mux_asel_out;
  wire [16-1:0] M_sel_mux_bsel_out;
  wire [16-1:0] M_sel_mux_wdsel_out;
  reg [16-1:0] M_sel_mux_ra_data;
  reg [16-1:0] M_sel_mux_rb_data;
  reg [16-1:0] M_sel_mux_alu_data;
  reg [2-1:0] M_sel_mux_asel_signal;
  reg [3-1:0] M_sel_mux_bsel_signal;
  reg [2-1:0] M_sel_mux_wdsel_signal;
  sel_mux_10 sel_mux (
    .ra_data(M_sel_mux_ra_data),
    .rb_data(M_sel_mux_rb_data),
    .alu_data(M_sel_mux_alu_data),
    .asel_signal(M_sel_mux_asel_signal),
    .bsel_signal(M_sel_mux_bsel_signal),
    .wdsel_signal(M_sel_mux_wdsel_signal),
    .asel_out(M_sel_mux_asel_out),
    .bsel_out(M_sel_mux_bsel_out),
    .wdsel_out(M_sel_mux_wdsel_out)
  );
  
  wire [(3'h4+0)-1:0] M_led_out_led;
  reg [(3'h4+0)-1:0] M_led_out_update;
  reg [(3'h4+0)*16-1:0] M_led_out_encode;
  
  genvar GEN_led_out0;
  generate
  for (GEN_led_out0=0;GEN_led_out0<3'h4;GEN_led_out0=GEN_led_out0+1) begin: led_out_gen_0
    led_out_11 led_out (
      .clk(clk),
      .rst(rst),
      .update(M_led_out_update[GEN_led_out0*(1)+(1)-1-:(1)]),
      .encode(M_led_out_encode[GEN_led_out0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .led(M_led_out_led[GEN_led_out0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_slow_clock_value;
  counter_12 slow_clock (
    .clk(clk),
    .rst(rst),
    .value(M_slow_clock_value)
  );
  
  wire [1-1:0] M_slow_edge_out;
  reg [1-1:0] M_slow_edge_in;
  edge_detector_3 slow_edge (
    .clk(clk),
    .in(M_slow_edge_in),
    .out(M_slow_edge_out)
  );
  
  
  localparam IDLE_phase = 6'd0;
  localparam POSITION_phase = 6'd1;
  localparam BRANCHCOLOURINDEX_phase = 6'd2;
  localparam INCREASECOLOURINDEX_phase = 6'd3;
  localparam UPDATECOLOURINDEX_phase = 6'd4;
  localparam BACKTOFIRSTCOLOURINDEX_phase = 6'd5;
  localparam ADDTOGUESSINDEX_phase = 6'd6;
  localparam UPDATEGUESSINDEX_phase = 6'd7;
  localparam SHIFTLEFTGUESSINDEX_phase = 6'd8;
  localparam UPDATESHIFTEDGUESSINDEX_phase = 6'd9;
  localparam BRANCHCHECKPOSITIONINDEX_phase = 6'd10;
  localparam INCREASEPOSITIONINDEX_phase = 6'd11;
  localparam UPDATEPOSITIONINDEX_phase = 6'd12;
  localparam FINISH_phase = 6'd13;
  localparam UPDATEHINTLED_phase = 6'd14;
  localparam GETGUESS_phase = 6'd15;
  localparam GETCODE_phase = 6'd16;
  localparam CHECKGUESS_CORRCODE_phase = 6'd17;
  localparam SHIFTHINTRED_phase = 6'd18;
  localparam UPDATEHINTRED_phase = 6'd19;
  localparam SHIFTGUESSHELPERDEFAULT_phase = 6'd20;
  localparam UPDATEGUESSHELPERDEFAULT_phase = 6'd21;
  localparam SHIFTCODEHELPER_phase = 6'd22;
  localparam UPDATECODEHELPER_phase = 6'd23;
  localparam CHECKCODEHELPER_phase = 6'd24;
  localparam SHIFTNOHINT_phase = 6'd25;
  localparam UPDATENOHINT_phase = 6'd26;
  localparam GETNEXTCODE_phase = 6'd27;
  localparam SHIFTTEMPGUESS_phase = 6'd28;
  localparam UPDATETEMPGUESS_phase = 6'd29;
  localparam CHECKTEMPGUESS_TEMPCODE_phase = 6'd30;
  localparam SHIFTHINTWHITE_phase = 6'd31;
  localparam UPDATEHINTWHITE_phase = 6'd32;
  localparam SHIFTCODEHELPERDEFAULT_phase = 6'd33;
  localparam UPDATECODEHELPERDEFAULT_phase = 6'd34;
  localparam COMPARETEMPCOUNTER_phase = 6'd35;
  localparam ADDTEMPCOUNTER_phase = 6'd36;
  localparam UPDATETEMPCOUNTER_phase = 6'd37;
  localparam ADDIMPOSTER_phase = 6'd38;
  localparam UPDATEIMPOSTER_phase = 6'd39;
  localparam COMPARECODE_GUESS_phase = 6'd40;
  localparam SHIFTATTEMPTCOUNT_phase = 6'd41;
  localparam UPDATEATTEMPTCOUNT_phase = 6'd42;
  localparam BRANCHATTEMPTCOUNT_phase = 6'd43;
  localparam RESETPOSITION_phase = 6'd44;
  localparam RESETCOLOUR_phase = 6'd45;
  localparam RESETHINT_phase = 6'd46;
  localparam RESETCOUNTER_phase = 6'd47;
  localparam RESETATTEMPT_phase = 6'd48;
  localparam LOSE_phase = 6'd49;
  localparam WIN_phase = 6'd50;
  localparam GAMEOVER_phase = 6'd51;
  
  reg [5:0] M_phase_d, M_phase_q = IDLE_phase;
  
  always @* begin
    M_phase_d = M_phase_q;
    
    M_regfile_ra = 4'h0;
    M_regfile_rb = 4'h0;
    M_regfile_rc = 4'h0;
    M_regfile_we = 1'h0;
    M_regfile_wr_data = 1'h0;
    M_alu16_alufn_signal = 6'h00;
    M_sel_mux_asel_signal = 2'h0;
    M_sel_mux_bsel_signal = 3'h0;
    M_sel_mux_wdsel_signal = 2'h0;
    M_sel_mux_ra_data = M_regfile_ra_data;
    M_sel_mux_rb_data = M_regfile_rb_data;
    M_alu16_a = M_sel_mux_asel_out;
    M_alu16_b = M_sel_mux_bsel_out;
    M_sel_mux_alu_data = M_alu16_out;
    M_regfile_wr_data = M_sel_mux_wdsel_out;
    out = 16'h0000;
    seg_out = 20'h00000;
    M_slow_edge_in = M_slow_clock_value;
    M_led_out_update = 4'h0;
    M_led_out_encode = 64'h0000000000000000;
    outled = M_led_out_led;
    
    case (M_phase_q)
      IDLE_phase: begin
        if (trigger_start == 1'h1) begin
          M_phase_d = POSITION_phase;
        end
      end
      POSITION_phase: begin
        seg_out = 20'h04c12;
        M_regfile_ra = 4'h1;
        M_regfile_rb = 4'h2;
        
        case (dips)
          1'h1: begin
            out = M_sel_mux_asel_out;
          end
          2'h2: begin
            out = M_sel_mux_bsel_out;
          end
        endcase
        if (colour_button) begin
          M_phase_d = BRANCHCOLOURINDEX_phase;
        end
      end
      BRANCHCOLOURINDEX_phase: begin
        seg_out = 20'h02d81;
        M_regfile_ra = 4'h2;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h7;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h35;
        if (M_sel_mux_wdsel_out && trigger_start) begin
          M_phase_d = INCREASECOLOURINDEX_phase;
        end else begin
          if (trigger_start) begin
            M_phase_d = BACKTOFIRSTCOLOURINDEX_phase;
          end
        end
      end
      INCREASECOLOURINDEX_phase: begin
        seg_out = 20'h00581;
        M_regfile_ra = 4'h2;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATECOLOURINDEX_phase;
        end
      end
      UPDATECOLOURINDEX_phase: begin
        seg_out = 20'h05581;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h2;
        M_regfile_we = 1'h1;
        out = M_sel_mux_asel_out;
        if (confirm_button) begin
          M_phase_d = SHIFTLEFTGUESSINDEX_phase;
        end else begin
          if (colour_button) begin
            M_phase_d = BRANCHCOLOURINDEX_phase;
          end
        end
      end
      BACKTOFIRSTCOLOURINDEX_phase: begin
        seg_out = 20'h5c581;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h3;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATECOLOURINDEX_phase;
        end
      end
      SHIFTLEFTGUESSINDEX_phase: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'h7;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h20;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATESHIFTEDGUESSINDEX_phase;
        end
      end
      UPDATESHIFTEDGUESSINDEX_phase: begin
        seg_out = 20'hacaa1;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h7;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = ADDTOGUESSINDEX_phase;
        end
      end
      ADDTOGUESSINDEX_phase: begin
        seg_out = 20'h00154;
        M_regfile_ra = 4'h2;
        M_regfile_rb = 4'h7;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATEGUESSINDEX_phase;
        end
      end
      UPDATEGUESSINDEX_phase: begin
        seg_out = 20'h056a1;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h7;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = BRANCHCHECKPOSITIONINDEX_phase;
        end
      end
      BRANCHCHECKPOSITIONINDEX_phase: begin
        seg_out = 20'h5b261;
        M_regfile_ra = 4'h1;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h3;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h35;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (M_sel_mux_wdsel_out && trigger_start) begin
          M_phase_d = INCREASEPOSITIONINDEX_phase;
        end else begin
          if (trigger_start) begin
            M_phase_d = FINISH_phase;
          end
        end
      end
      INCREASEPOSITIONINDEX_phase: begin
        seg_out = 20'h00661;
        M_regfile_ra = 4'h1;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATEPOSITIONINDEX_phase;
        end
      end
      UPDATEPOSITIONINDEX_phase: begin
        seg_out = 20'h05661;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h1;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = BACKTOFIRSTCOLOURINDEX_phase;
        end
      end
      FINISH_phase: begin
        seg_out = 20'h8864e;
        if (confirm_button) begin
          M_phase_d = GETGUESS_phase;
        end
      end
      GETGUESS_phase: begin
        seg_out = 20'h00001;
        M_regfile_ra = 4'h7;
        M_regfile_rb = 4'h8;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 4'hb;
        M_regfile_we = 1'h1;
        out = M_sel_mux_asel_out;
        if (trigger_start == 1'h1) begin
          M_phase_d = GETCODE_phase;
        end
      end
      GETCODE_phase: begin
        seg_out = 20'h00002;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 4'ha;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = CHECKGUESS_CORRCODE_phase;
        end
      end
      CHECKGUESS_CORRCODE_phase: begin
        seg_out = 20'h6318c;
        M_regfile_ra = 4'ha;
        M_regfile_rb = 4'hb;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_d = SHIFTHINTRED_phase;
          end else begin
            M_phase_d = SHIFTCODEHELPER_phase;
          end
        end
      end
      SHIFTHINTRED_phase: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATEHINTRED_phase;
        end
      end
      UPDATEHINTRED_phase: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h3;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = SHIFTGUESSHELPERDEFAULT_phase;
        end
      end
      SHIFTCODEHELPER_phase: begin
        seg_out = 20'h0498e;
        M_regfile_ra = 4'h6;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATECODEHELPER_phase;
        end
      end
      UPDATECODEHELPER_phase: begin
        seg_out = 20'h0558e;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h6;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = CHECKCODEHELPER_phase;
        end
      end
      CHECKCODEHELPER_phase: begin
        seg_out = 20'h0318e;
        M_regfile_ra = 4'h6;
        M_regfile_rb = 4'h8;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_d = SHIFTNOHINT_phase;
          end else begin
            M_phase_d = GETNEXTCODE_phase;
          end
        end
      end
      SHIFTNOHINT_phase: begin
        seg_out = 20'h0000e;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATENOHINT_phase;
        end
      end
      UPDATENOHINT_phase: begin
        seg_out = 20'ha800e;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = SHIFTGUESSHELPERDEFAULT_phase;
        end
      end
      GETNEXTCODE_phase: begin
        seg_out = 20'h00003;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h6;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 4'ha;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = SHIFTTEMPGUESS_phase;
        end
      end
      SHIFTTEMPGUESS_phase: begin
        seg_out = 20'h00012;
        M_regfile_ra = 4'hb;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATETEMPGUESS_phase;
        end
      end
      UPDATETEMPGUESS_phase: begin
        seg_out = 20'h0540c;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 16'h001a;
        M_regfile_rc = 4'hb;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = CHECKTEMPGUESS_TEMPCODE_phase;
        end
      end
      CHECKTEMPGUESS_TEMPCODE_phase: begin
        seg_out = 20'h0300c;
        M_regfile_ra = 4'ha;
        M_regfile_rb = 4'hb;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_d = SHIFTHINTWHITE_phase;
          end else begin
            M_phase_d = SHIFTCODEHELPER_phase;
          end
        end
      end
      SHIFTHINTWHITE_phase: begin
        seg_out = 20'h049ce;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h23;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATEHINTWHITE_phase;
        end
      end
      UPDATEHINTWHITE_phase: begin
        seg_out = 20'h029ce;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = SHIFTGUESSHELPERDEFAULT_phase;
        end
      end
      SHIFTGUESSHELPERDEFAULT_phase: begin
        seg_out = 20'h031cf;
        M_regfile_ra = 4'h8;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h24;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATEGUESSHELPERDEFAULT_phase;
        end
      end
      UPDATEGUESSHELPERDEFAULT_phase: begin
        seg_out = 20'h055cf;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h8;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATECODEHELPERDEFAULT_phase;
        end
      end
      UPDATECODEHELPERDEFAULT_phase: begin
        seg_out = 20'h0318f;
        M_regfile_ra = 4'h8;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h6;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = COMPARETEMPCOUNTER_phase;
        end
      end
      COMPARETEMPCOUNTER_phase: begin
        seg_out = 20'h6302c;
        M_regfile_ra = 4'hc;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_d = ADDIMPOSTER_phase;
          end else begin
            M_phase_d = ADDTEMPCOUNTER_phase;
          end
        end
      end
      ADDTEMPCOUNTER_phase: begin
        seg_out = 20'h53180;
        M_regfile_ra = 4'hc;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATETEMPCOUNTER_phase;
        end
      end
      UPDATETEMPCOUNTER_phase: begin
        seg_out = 20'hab18c;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'hc;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = GETGUESS_phase;
        end
      end
      ADDIMPOSTER_phase: begin
        seg_out = 20'h52821;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'hd;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1e;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        out = M_sel_mux_asel_out;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATEIMPOSTER_phase;
        end
      end
      UPDATEIMPOSTER_phase: begin
        seg_out = 20'ha8421;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        out = M_sel_mux_asel_out;
        if (trigger_start == 1'h1) begin
          M_phase_d = COMPARECODE_GUESS_phase;
        end
      end
      COMPARECODE_GUESS_phase: begin
        seg_out = 20'h6318c;
        M_regfile_ra = 4'h5;
        M_regfile_rb = 4'h7;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_d = WIN_phase;
          end else begin
            M_phase_d = UPDATEHINTLED_phase;
          end
        end
      end
      UPDATEHINTLED_phase: begin
        seg_out = 20'hab82d;
        M_regfile_ra = 4'h9;
        M_regfile_rb = 4'h3;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_led_out_encode = {3'h4{{M_sel_mux_asel_out}}};
        out = M_sel_mux_asel_out;
        for (index = 1'h0; index < 3'h4; index = index + 1) begin
          M_led_out_update[(index)*1+0-:1] = M_sel_mux_bsel_out[(index)*1+0-:1];
        end
        if (trigger_start == 1'h1) begin
          M_phase_d = SHIFTATTEMPTCOUNT_phase;
        end
      end
      SHIFTATTEMPTCOUNT_phase: begin
        seg_out = 20'h5298c;
        M_regfile_ra = 4'h3;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h24;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = UPDATEATTEMPTCOUNT_phase;
        end
      end
      UPDATEATTEMPTCOUNT_phase: begin
        seg_out = 20'haa98c;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h3;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = BRANCHATTEMPTCOUNT_phase;
        end
      end
      BRANCHATTEMPTCOUNT_phase: begin
        seg_out = 20'h5314c;
        M_regfile_ra = 4'h3;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h1;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h33;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (trigger_start == 1'h1) begin
          if (M_sel_mux_wdsel_out == 16'h0001) begin
            M_phase_d = LOSE_phase;
          end else begin
            M_phase_d = RESETPOSITION_phase;
          end
        end
      end
      RESETPOSITION_phase: begin
        seg_out = 20'ha5281;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h2;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h1;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = RESETCOLOUR_phase;
        end
      end
      RESETCOLOUR_phase: begin
        seg_out = 20'ha5282;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h3;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h2;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = RESETHINT_phase;
        end
      end
      RESETHINT_phase: begin
        seg_out = 20'ha5283;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h2;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h9;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = IDLE_phase;
        end
      end
      LOSE_phase: begin
        seg_out = 20'h8024d;
        if (trigger_start == 1'h1) begin
          M_phase_d = GAMEOVER_phase;
        end
      end
      WIN_phase: begin
        seg_out = 20'h9aa52;
        if (trigger_start == 1'h1) begin
          M_phase_d = GAMEOVER_phase;
        end
      end
      GAMEOVER_phase: begin
        seg_out = 20'h8864e;
        if (trigger_start == 1'h1) begin
          M_phase_d = RESETCOUNTER_phase;
        end
      end
      RESETCOUNTER_phase: begin
        seg_out = 20'ha5281;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h1;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'hc;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = RESETATTEMPT_phase;
        end
      end
      RESETATTEMPT_phase: begin
        seg_out = 20'ha5281;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 3'h4;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'hc;
        M_regfile_we = 1'h1;
        if (trigger_start == 1'h1) begin
          M_phase_d = IDLE_phase;
        end
      end
    endcase
  end
  
  always @* begin
    debug__ = {M_regfile_debug__};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_phase_q <= 1'h0;
    end else begin
      M_phase_q <= M_phase_d;
    end
  end
  
endmodule
