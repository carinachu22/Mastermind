/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module led2_4 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    input colour_button,
    input confirm_button,
    output reg [15:0] out,
    output reg [19:0] seg_out,
    output reg [3:0] outled
  );
  
  
  
  integer index;
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  wire [16-1:0] M_alu16_a_data;
  wire [16-1:0] M_alu16_b_data;
  wire [6-1:0] M_alu16_aluop_signal;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn),
    .a_data(M_alu16_a_data),
    .b_data(M_alu16_b_data),
    .aluop_signal(M_alu16_aluop_signal)
  );
  
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [16-1:0] M_regfile_data;
  wire [5-1:0] M_regfile_ra_addr;
  wire [5-1:0] M_regfile_rb_addr;
  wire [5-1:0] M_regfile_rc_addr;
  wire [16-1:0] M_regfile_rc_data;
  wire [1-1:0] M_regfile_we_signal;
  reg [5-1:0] M_regfile_ra;
  reg [5-1:0] M_regfile_rb;
  reg [5-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wr_data;
  regfile_8 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .wr_data(M_regfile_wr_data),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .data(M_regfile_data),
    .ra_addr(M_regfile_ra_addr),
    .rb_addr(M_regfile_rb_addr),
    .rc_addr(M_regfile_rc_addr),
    .rc_data(M_regfile_rc_data),
    .we_signal(M_regfile_we_signal)
  );
  
  wire [16-1:0] M_sel_mux_asel_out;
  wire [16-1:0] M_sel_mux_bsel_out;
  wire [16-1:0] M_sel_mux_wdsel_out;
  reg [16-1:0] M_sel_mux_ra_data;
  reg [16-1:0] M_sel_mux_rb_data;
  reg [16-1:0] M_sel_mux_alu_data;
  reg [2-1:0] M_sel_mux_asel_signal;
  reg [4-1:0] M_sel_mux_bsel_signal;
  reg [2-1:0] M_sel_mux_wdsel_signal;
  sel_mux_9 sel_mux (
    .ra_data(M_sel_mux_ra_data),
    .rb_data(M_sel_mux_rb_data),
    .alu_data(M_sel_mux_alu_data),
    .asel_signal(M_sel_mux_asel_signal),
    .bsel_signal(M_sel_mux_bsel_signal),
    .wdsel_signal(M_sel_mux_wdsel_signal),
    .asel_out(M_sel_mux_asel_out),
    .bsel_out(M_sel_mux_bsel_out),
    .wdsel_out(M_sel_mux_wdsel_out)
  );
  
  wire [(3'h4+0)-1:0] M_led_out_led;
  reg [(3'h4+0)-1:0] M_led_out_update;
  reg [(3'h4+0)*16-1:0] M_led_out_encode;
  
  genvar GEN_led_out0;
  generate
  for (GEN_led_out0=0;GEN_led_out0<3'h4;GEN_led_out0=GEN_led_out0+1) begin: led_out_gen_0
    led_out_10 led_out (
      .clk(clk),
      .rst(rst),
      .update(M_led_out_update[GEN_led_out0*(1)+(1)-1-:(1)]),
      .encode(M_led_out_encode[GEN_led_out0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .led(M_led_out_led[GEN_led_out0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_slow_clock_value;
  counter_11 slow_clock (
    .clk(clk),
    .rst(rst),
    .value(M_slow_clock_value)
  );
  
  wire [1-1:0] M_slow_edge_out;
  reg [1-1:0] M_slow_edge_in;
  edge_detector_3 slow_edge (
    .clk(clk),
    .in(M_slow_edge_in),
    .out(M_slow_edge_out)
  );
  
  reg [15:0] M_current_led_d, M_current_led_q = 1'h0;
  
  reg [3:0] M_current_strip_d, M_current_strip_q = 1'h0;
  
  
  localparam IDLE_phase = 5'd0;
  localparam UPDATEHINTLED_phase = 5'd1;
  localparam POSITION_phase = 5'd2;
  localparam BRANCHCOLOURINDEX_phase = 5'd3;
  localparam INCREASECOLOURINDEX_phase = 5'd4;
  localparam UPDATECOLOURINDEX_phase = 5'd5;
  localparam BACKTOFIRSTCOLOURINDEX_phase = 5'd6;
  localparam UPDATECOLOURPOS0_phase = 5'd7;
  localparam ADDTOGUESSINDEX_phase = 5'd8;
  localparam UPDATEGUESSINDEX_phase = 5'd9;
  localparam SHIFTLEFTGUESSINDEX_phase = 5'd10;
  localparam UPDATESHIFTEDGUESSINDEX_phase = 5'd11;
  localparam BRANCHCHECKPOSITIONINDEX_phase = 5'd12;
  localparam INCREASEPOSITIONINDEX_phase = 5'd13;
  localparam UPDATEPOSITIONINDEX_phase = 5'd14;
  localparam FINISH_phase = 5'd15;
  localparam ANDLEDSTRIP_phase = 5'd16;
  localparam SHIFTCOLOUR_phase = 5'd17;
  localparam UPDATELEDCOLOUR_phase = 5'd18;
  
  reg [4:0] M_phase_d, M_phase_q = IDLE_phase;
  
  always @* begin
    M_phase_d = M_phase_q;
    M_current_strip_d = M_current_strip_q;
    M_current_led_d = M_current_led_q;
    
    M_regfile_ra = 4'h0;
    M_regfile_rb = 4'h0;
    M_regfile_rc = 4'h0;
    M_regfile_we = 1'h0;
    M_regfile_wr_data = 1'h0;
    M_alu16_alufn_signal = 6'h00;
    M_sel_mux_asel_signal = 2'h0;
    M_sel_mux_bsel_signal = 3'h0;
    M_sel_mux_wdsel_signal = 2'h0;
    M_current_strip_d = 4'h8;
    M_sel_mux_ra_data = M_regfile_ra_data;
    M_sel_mux_rb_data = M_regfile_rb_data;
    M_alu16_a = M_sel_mux_asel_out;
    M_alu16_b = M_sel_mux_bsel_out;
    M_sel_mux_alu_data = M_alu16_out;
    M_regfile_wr_data = M_sel_mux_wdsel_out;
    out = 16'h0000;
    seg_out = 20'h00000;
    M_slow_edge_in = M_slow_clock_value;
    M_led_out_update = 4'h0;
    M_led_out_encode = 64'h0000000000000000;
    outled = M_led_out_led;
    
    case (M_phase_q)
      IDLE_phase: begin
        seg_out = 20'h0be0d;
        if (trigger_start) begin
          M_phase_d = POSITION_phase;
        end
      end
      POSITION_phase: begin
        seg_out = 20'h055d0;
        M_regfile_ra = 4'he;
        M_regfile_rb = 4'h3;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_led_out_encode = {3'h4{{M_sel_mux_asel_out}}};
        out = M_sel_mux_asel_out;
        for (index = 1'h0; index < 3'h4; index = index + 1) begin
          M_led_out_update[(index)*1+0-:1] = M_sel_mux_bsel_out[(index)*1+0-:1];
        end
        if (colour_button) begin
          M_phase_d = BRANCHCOLOURINDEX_phase;
        end
      end
      BRANCHCOLOURINDEX_phase: begin
        seg_out = 20'h02d81;
        M_regfile_ra = 4'h2;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h7;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h35;
        if (M_sel_mux_wdsel_out && trigger_start) begin
          M_phase_d = INCREASECOLOURINDEX_phase;
        end else begin
          if (trigger_start) begin
            M_phase_d = BACKTOFIRSTCOLOURINDEX_phase;
          end
        end
      end
      INCREASECOLOURINDEX_phase: begin
        seg_out = 20'h00581;
        M_regfile_ra = 4'h2;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATECOLOURINDEX_phase;
        end
      end
      UPDATECOLOURINDEX_phase: begin
        seg_out = 20'h05581;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h2;
        M_regfile_we = 1'h1;
        out = M_sel_mux_asel_out;
        if (trigger_start) begin
          M_phase_d = ANDLEDSTRIP_phase;
        end
      end
      ANDLEDSTRIP_phase: begin
        seg_out = 20'h02a12;
        M_regfile_ra = 4'he;
        M_regfile_rb = 5'h10;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h18;
        M_regfile_rc = 5'h11;
        M_regfile_we = 1'h1;
        out = M_sel_mux_wdsel_out;
        if (trigger_start) begin
          M_phase_d = SHIFTCOLOUR_phase;
        end
      end
      SHIFTCOLOUR_phase: begin
        seg_out = 20'h0498a;
        M_regfile_ra = 4'h2;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 4'hc;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h20;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        out = M_sel_mux_wdsel_out;
        if (trigger_start) begin
          M_phase_d = UPDATELEDCOLOUR_phase;
        end
      end
      UPDATELEDCOLOUR_phase: begin
        seg_out = 20'hac260;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 5'h11;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_led_out_encode = {3'h4{{M_sel_mux_wdsel_out}}};
        out = M_sel_mux_wdsel_out;
        for (index = 1'h0; index < 3'h4; index = index + 1) begin
          M_led_out_update[(index)*1+0-:1] = M_current_strip_q[(index)*1+0-:1];
        end
        if (confirm_button) begin
          M_phase_d = SHIFTLEFTGUESSINDEX_phase;
        end else begin
          if (colour_button) begin
            M_phase_d = BRANCHCOLOURINDEX_phase;
          end else begin
            if (trigger_start) begin
              M_phase_d = FINISH_phase;
            end
          end
        end
      end
      UPDATECOLOURPOS0_phase: begin
        seg_out = 20'hab260;
        M_regfile_ra = 4'he;
        M_regfile_rb = 4'h2;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_current_led_d[12+3-:4] = M_sel_mux_bsel_out;
        M_current_led_d[0+11-:12] = M_sel_mux_asel_out;
        M_led_out_encode = {3'h4{{M_current_led_q}}};
        out = M_current_led_q;
        for (index = 1'h0; index < 3'h4; index = index + 1) begin
          M_led_out_update[(index)*1+0-:1] = M_current_strip_q[(index)*1+0-:1];
        end
        if (confirm_button) begin
          M_phase_d = SHIFTLEFTGUESSINDEX_phase;
        end else begin
          if (colour_button) begin
            M_phase_d = BRANCHCOLOURINDEX_phase;
          end else begin
            if (trigger_start) begin
              M_phase_d = FINISH_phase;
            end
          end
        end
      end
      BACKTOFIRSTCOLOURINDEX_phase: begin
        seg_out = 20'h5c581;
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h3;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATECOLOURINDEX_phase;
        end
      end
      SHIFTLEFTGUESSINDEX_phase: begin
        seg_out = 20'h049d4;
        M_regfile_ra = 4'h7;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h4;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_alufn_signal = 6'h20;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATESHIFTEDGUESSINDEX_phase;
        end
      end
      UPDATESHIFTEDGUESSINDEX_phase: begin
        seg_out = 20'hacaa1;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h7;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = ADDTOGUESSINDEX_phase;
        end
      end
      ADDTOGUESSINDEX_phase: begin
        seg_out = 20'h00154;
        M_regfile_ra = 4'h2;
        M_regfile_rb = 4'h7;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATEGUESSINDEX_phase;
        end
      end
      UPDATEGUESSINDEX_phase: begin
        seg_out = 20'h056a1;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h7;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = BRANCHCHECKPOSITIONINDEX_phase;
        end
      end
      BRANCHCHECKPOSITIONINDEX_phase: begin
        seg_out = 20'h5b261;
        M_regfile_ra = 4'h1;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h3;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h35;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        if (M_sel_mux_wdsel_out && trigger_start) begin
          M_phase_d = INCREASEPOSITIONINDEX_phase;
        end else begin
          if (trigger_start) begin
            M_phase_d = FINISH_phase;
          end
        end
      end
      INCREASEPOSITIONINDEX_phase: begin
        seg_out = 20'h00661;
        M_regfile_ra = 4'h1;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 3'h2;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_regfile_rc = 4'hf;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = UPDATEPOSITIONINDEX_phase;
        end
      end
      UPDATEPOSITIONINDEX_phase: begin
        seg_out = 20'h05661;
        M_regfile_ra = 4'hf;
        M_regfile_rb = 4'h0;
        M_sel_mux_asel_signal = 1'h0;
        M_sel_mux_bsel_signal = 1'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h1a;
        M_regfile_rc = 4'h1;
        M_regfile_we = 1'h1;
        if (trigger_start) begin
          M_phase_d = BACKTOFIRSTCOLOURINDEX_phase;
        end
      end
      FINISH_phase: begin
        seg_out = 20'h8864e;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_phase_q <= 1'h0;
    end else begin
      M_phase_q <= M_phase_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_current_led_q <= 1'h0;
    end else begin
      M_current_led_q <= M_current_led_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_current_strip_q <= 1'h0;
    end else begin
      M_current_strip_q <= M_current_strip_d;
    end
  end
  
endmodule
