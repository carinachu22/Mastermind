/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module led_out_10 (
    input clk,
    input rst,
    input update,
    input [15:0] encode,
    output reg led
  );
  
  
  
  localparam PIXEL_COUNT = 3'h4;
  
  localparam ENCODING_AMOUNT = 4'h8;
  
  reg [3:0] transformed_pixel_address;
  
  reg [3:0] current_color_encoding;
  
  integer index;
  
  localparam LEDCOLOR = 192'h00333366ff664c9900330000003300000033606060000000;
  
  reg [15:0] M_led_encoding_d, M_led_encoding_q = 1'h0;
  
  reg [15:0] M_temp_encoding_d, M_temp_encoding_q = 1'h0;
  
  wire [2-1:0] M_led_strip_pixel_address;
  wire [1-1:0] M_led_strip_led;
  wire [1-1:0] M_led_strip_reset;
  reg [1-1:0] M_led_strip_update;
  reg [24-1:0] M_led_strip_color;
  ws2812b_writer_20 led_strip (
    .clk(clk),
    .rst(rst),
    .update(M_led_strip_update),
    .color(M_led_strip_color),
    .pixel_address(M_led_strip_pixel_address),
    .led(M_led_strip_led),
    .reset(M_led_strip_reset)
  );
  
  
  localparam IDLE_state = 1'd0;
  localparam LOAD_state = 1'd1;
  
  reg M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_temp_encoding_d = M_temp_encoding_q;
    M_led_encoding_d = M_led_encoding_q;
    
    
    case (M_state_q)
      IDLE_state: begin
        if (update) begin
          M_temp_encoding_d = encode;
          M_state_d = LOAD_state;
        end
      end
      LOAD_state: begin
        if (M_led_strip_reset) begin
          M_led_encoding_d = M_temp_encoding_q;
          M_state_d = IDLE_state;
        end
      end
    endcase
    M_led_strip_update = 1'h1;
    transformed_pixel_address = M_led_strip_pixel_address * 3'h4;
    for (index = 1'h0; index < 2'h3; index = index + 1) begin
      current_color_encoding[(index)*1+0-:1] = M_led_encoding_q[(transformed_pixel_address + index)*1+0-:1];
    end
    M_led_strip_color = LEDCOLOR[(current_color_encoding)*24+23-:24];
    led = M_led_strip_led;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_led_encoding_q <= 1'h0;
    end else begin
      M_led_encoding_q <= M_led_encoding_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_temp_encoding_q <= 1'h0;
    end else begin
      M_temp_encoding_q <= M_temp_encoding_d;
    end
  end
  
endmodule
