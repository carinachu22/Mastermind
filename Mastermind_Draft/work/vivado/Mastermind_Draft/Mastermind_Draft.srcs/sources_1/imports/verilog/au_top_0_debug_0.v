/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg [3:0] outled,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  integer index;
  
  reg trigger_led;
  
  reg switch_state;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h4+0)-1:0] M_buttoncond_out;
  reg [(3'h4+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h4;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_2 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h4+0)-1:0] M_buttondetector_out;
  reg [(3'h4+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h4;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_3 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [(3'h4+0)-1:0] M_led_out_led;
  reg [(3'h4+0)-1:0] M_led_out_update;
  reg [(3'h4+0)*16-1:0] M_led_out_encode;
  
  genvar GEN_led_out0;
  generate
  for (GEN_led_out0=0;GEN_led_out0<3'h4;GEN_led_out0=GEN_led_out0+1) begin: led_out_gen_0
    led_out_5 led_out (
      .clk(clk),
      .rst(rst),
      .update(M_led_out_update[GEN_led_out0*(1)+(1)-1-:(1)]),
      .encode(M_led_out_encode[GEN_led_out0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .led(M_led_out_led[GEN_led_out0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  localparam IDLE_test_mode = 1'd0;
  localparam MANUAL_test_mode = 1'd1;
  
  reg M_test_mode_d, M_test_mode_q = IDLE_test_mode;
  reg [3:0] M_count_left_d, M_count_left_q = 3'h4;
  reg [15:0] M_temp_encode_d, M_temp_encode_q = 1'h0;
  
  always @* begin
    M_test_mode_d = M_test_mode_q;
    M_temp_encode_d = M_temp_encode_q;
    M_count_left_d = M_count_left_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_buttoncond_in = io_button[0+3-:4];
    M_buttondetector_in = M_buttoncond_out;
    switch_state = M_buttondetector_out[0+0-:1];
    trigger_led = M_buttondetector_out[1+0-:1];
    M_temp_encode_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
    M_count_left_d = io_dip[16+0+3-:4];
    M_led_out_encode = {3'h4{{M_temp_encode_q}}};
    M_led_out_update = 4'h0;
    if (trigger_led) begin
      for (index = 1'h0; index < 3'h4; index = index + 1) begin
        M_led_out_update[(index)*1+0-:1] = M_count_left_q[(index)*1+0-:1];
      end
    end
    outled = M_led_out_led;
    M_seg_values = 20'h001c1;
    
    case (M_test_mode_q)
      IDLE_test_mode: begin
        if (switch_state) begin
          M_test_mode_d = MANUAL_test_mode;
        end
      end
      MANUAL_test_mode: begin
        if (switch_state) begin
          M_test_mode_d = IDLE_test_mode;
        end
      end
    endcase
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
  
  reg [48-1:0] M_debugger_data;
  au_debugger_6 debugger (
    .clk(clk),
    .data(M_debugger_data)
  );
  
  always @* begin
    M_debugger_data = {io_button, io_dip, M_temp_encode_q, M_test_mode_q, M_buttondetector_out, M_led_out_led};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_count_left_q <= 3'h4;
      M_temp_encode_q <= 1'h0;
      M_test_mode_q <= 1'h0;
    end else begin
      M_count_left_q <= M_count_left_d;
      M_temp_encode_q <= M_temp_encode_d;
      M_test_mode_q <= M_test_mode_d;
    end
  end
  
endmodule
