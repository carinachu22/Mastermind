/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_8 (
    input clk,
    input rst,
    input [3:0] ra,
    input [3:0] rb,
    input [3:0] rc,
    input we,
    input [15:0] wr_data,
    output reg [15:0] ra_data,
    output reg [15:0] rb_data,
    output reg [15:0] data,
    output reg [3:0] ra_addr,
    output reg [3:0] rb_addr
  );
  
  
  
  reg [15:0] M_reg_current_position_d, M_reg_current_position_q = 1'h0;
  
  reg [15:0] M_reg_current_colour_d, M_reg_current_colour_q = 1'h0;
  
  reg [15:0] M_reg_current_guess_count_d, M_reg_current_guess_count_q = 1'h0;
  
  reg [15:0] M_reg_game_mode_d, M_reg_game_mode_q = 1'h0;
  
  reg [15:0] M_reg_code_d, M_reg_code_q = 1'h0;
  
  reg [15:0] M_reg_code_helper_d, M_reg_code_helper_q = 1'h0;
  
  reg [15:0] M_reg_guess_d, M_reg_guess_q = 1'h0;
  
  reg [15:0] M_reg_guess_helper_d, M_reg_guess_helper_q = 1'h0;
  
  reg [15:0] M_reg_white_hint_count_d, M_reg_white_hint_count_q = 1'h0;
  
  reg [15:0] M_reg_red_hint_count_d, M_reg_red_hint_count_q = 1'h0;
  
  reg [15:0] M_reg_temp_code_d, M_reg_temp_code_q = 1'h0;
  
  reg [15:0] M_reg_temp_guess_d, M_reg_temp_guess_q = 1'h0;
  
  reg [15:0] M_reg_temp_counter_d, M_reg_temp_counter_q = 1'h0;
  
  reg [15:0] M_reg_imposter_d, M_reg_imposter_q = 1'h0;
  
  reg [15:0] M_reg_error_d, M_reg_error_q = 1'h0;
  
  always @* begin
    M_reg_current_guess_count_d = M_reg_current_guess_count_q;
    M_reg_imposter_d = M_reg_imposter_q;
    M_reg_guess_helper_d = M_reg_guess_helper_q;
    M_reg_code_helper_d = M_reg_code_helper_q;
    M_reg_temp_counter_d = M_reg_temp_counter_q;
    M_reg_error_d = M_reg_error_q;
    M_reg_temp_code_d = M_reg_temp_code_q;
    M_reg_current_position_d = M_reg_current_position_q;
    M_reg_current_colour_d = M_reg_current_colour_q;
    M_reg_game_mode_d = M_reg_game_mode_q;
    M_reg_white_hint_count_d = M_reg_white_hint_count_q;
    M_reg_temp_guess_d = M_reg_temp_guess_q;
    M_reg_guess_d = M_reg_guess_q;
    M_reg_code_d = M_reg_code_q;
    M_reg_red_hint_count_d = M_reg_red_hint_count_q;
    
    M_reg_current_position_d = 16'h0001;
    M_reg_current_colour_d = 16'h0001;
    M_reg_code_d = 16'h0001;
    M_reg_guess_d = 16'h1000;
    M_reg_current_guess_count_d = 16'h0004;
    M_reg_code_helper_d = 16'h0e00;
    M_reg_guess_helper_d = 16'h0e00;
    M_reg_imposter_d = 16'h0007;
    ra_data = 16'h0000;
    rb_data = 16'h0000;
    data = 16'h0000;
    ra_addr = 4'h0;
    rb_addr = 4'h0;
    if (we) begin
      
      case (rc)
        4'h1: begin
          M_reg_current_position_d = wr_data;
        end
        4'h2: begin
          M_reg_current_colour_d = wr_data;
        end
        4'h3: begin
          M_reg_current_guess_count_d = wr_data;
        end
        4'h4: begin
          M_reg_game_mode_d = wr_data;
        end
        4'h5: begin
          M_reg_code_d = wr_data;
        end
        4'h6: begin
          M_reg_code_helper_d = wr_data;
        end
        4'h7: begin
          M_reg_guess_d = wr_data;
        end
        4'h8: begin
          M_reg_guess_helper_d = wr_data;
        end
        4'h9: begin
          M_reg_white_hint_count_d = wr_data;
        end
        4'ha: begin
          M_reg_red_hint_count_d = wr_data;
        end
        4'hb: begin
          M_reg_temp_code_d = wr_data;
        end
        4'hc: begin
          M_reg_temp_guess_d = wr_data;
        end
        4'hd: begin
          M_reg_temp_counter_d = wr_data;
        end
        4'he: begin
          M_reg_imposter_d = wr_data;
        end
        4'hf: begin
          M_reg_error_d = wr_data;
        end
      endcase
    end
    
    case (ra)
      4'h1: begin
        ra_data = M_reg_current_position_q;
      end
      4'h2: begin
        ra_data = M_reg_current_colour_q;
      end
      4'h3: begin
        ra_data = M_reg_current_guess_count_q;
      end
      4'h4: begin
        ra_data = M_reg_game_mode_q;
      end
      4'h5: begin
        ra_data = M_reg_code_q;
      end
      4'h6: begin
        ra_data = M_reg_code_helper_q;
      end
      4'h7: begin
        ra_data = M_reg_guess_q;
      end
      4'h8: begin
        ra_data = M_reg_guess_helper_q;
      end
      4'h9: begin
        ra_data = M_reg_white_hint_count_q;
      end
      4'ha: begin
        ra_data = M_reg_red_hint_count_q;
      end
      4'hb: begin
        ra_data = M_reg_temp_code_q;
      end
      4'hc: begin
        ra_data = M_reg_temp_guess_q;
      end
      4'hd: begin
        ra_data = M_reg_temp_counter_q;
      end
      4'he: begin
        ra_data = M_reg_imposter_q;
      end
      4'hf: begin
        ra_data = M_reg_error_q;
      end
      default: begin
        ra_data = 16'h0000;
      end
    endcase
    
    case (rb)
      4'h1: begin
        rb_data = M_reg_current_position_q;
      end
      4'h2: begin
        rb_data = M_reg_current_colour_q;
      end
      4'h3: begin
        rb_data = M_reg_current_guess_count_q;
      end
      4'h4: begin
        rb_data = M_reg_game_mode_q;
      end
      4'h5: begin
        rb_data = M_reg_code_q;
      end
      4'h6: begin
        rb_data = M_reg_code_helper_q;
      end
      4'h7: begin
        rb_data = M_reg_guess_q;
      end
      4'h8: begin
        rb_data = M_reg_guess_helper_q;
      end
      4'h9: begin
        rb_data = M_reg_white_hint_count_q;
      end
      4'ha: begin
        rb_data = M_reg_red_hint_count_q;
      end
      4'hb: begin
        rb_data = M_reg_temp_code_q;
      end
      4'hc: begin
        rb_data = M_reg_temp_guess_q;
      end
      4'hd: begin
        rb_data = M_reg_temp_counter_q;
      end
      4'he: begin
        rb_data = M_reg_imposter_q;
      end
      4'hf: begin
        rb_data = M_reg_error_q;
      end
      default: begin
        rb_data = 16'h0000;
      end
    endcase
    data = wr_data;
    ra_addr = ra;
    rb_addr = rb;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_temp_counter_q <= 1'h0;
    end else begin
      M_reg_temp_counter_q <= M_reg_temp_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_game_mode_q <= 1'h0;
    end else begin
      M_reg_game_mode_q <= M_reg_game_mode_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_imposter_q <= 1'h0;
    end else begin
      M_reg_imposter_q <= M_reg_imposter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_guess_helper_q <= 1'h0;
    end else begin
      M_reg_guess_helper_q <= M_reg_guess_helper_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_code_q <= 1'h0;
    end else begin
      M_reg_code_q <= M_reg_code_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_current_colour_q <= 1'h0;
    end else begin
      M_reg_current_colour_q <= M_reg_current_colour_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_code_helper_q <= 1'h0;
    end else begin
      M_reg_code_helper_q <= M_reg_code_helper_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_temp_guess_q <= 1'h0;
    end else begin
      M_reg_temp_guess_q <= M_reg_temp_guess_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_red_hint_count_q <= 1'h0;
    end else begin
      M_reg_red_hint_count_q <= M_reg_red_hint_count_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_error_q <= 1'h0;
    end else begin
      M_reg_error_q <= M_reg_error_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_current_position_q <= 1'h0;
    end else begin
      M_reg_current_position_q <= M_reg_current_position_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_guess_q <= 1'h0;
    end else begin
      M_reg_guess_q <= M_reg_guess_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_temp_code_q <= 1'h0;
    end else begin
      M_reg_temp_code_q <= M_reg_temp_code_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_current_guess_count_q <= 1'h0;
    end else begin
      M_reg_current_guess_count_q <= M_reg_current_guess_count_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_white_hint_count_q <= 1'h0;
    end else begin
      M_reg_white_hint_count_q <= M_reg_white_hint_count_d;
    end
  end
  
endmodule
