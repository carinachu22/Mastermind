/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sel_mux_manual_test_4 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    output reg [15:0] out,
    output reg [19:0] seg_out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn)
  );
  
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [16-1:0] M_regfile_data;
  wire [4-1:0] M_regfile_ra_addr;
  wire [4-1:0] M_regfile_rb_addr;
  reg [4-1:0] M_regfile_ra;
  reg [4-1:0] M_regfile_rb;
  reg [4-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wr_data;
  regfile_8 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .wr_data(M_regfile_wr_data),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .data(M_regfile_data),
    .ra_addr(M_regfile_ra_addr),
    .rb_addr(M_regfile_rb_addr)
  );
  
  wire [16-1:0] M_sel_mux_asel_out;
  wire [16-1:0] M_sel_mux_bsel_out;
  wire [16-1:0] M_sel_mux_wdsel_out;
  reg [16-1:0] M_sel_mux_ra_data;
  reg [16-1:0] M_sel_mux_rb_data;
  reg [16-1:0] M_sel_mux_alu_data;
  reg [2-1:0] M_sel_mux_asel_signal;
  reg [3-1:0] M_sel_mux_bsel_signal;
  reg [2-1:0] M_sel_mux_wdsel_signal;
  sel_mux_draft_9 sel_mux (
    .ra_data(M_sel_mux_ra_data),
    .rb_data(M_sel_mux_rb_data),
    .alu_data(M_sel_mux_alu_data),
    .asel_signal(M_sel_mux_asel_signal),
    .bsel_signal(M_sel_mux_bsel_signal),
    .wdsel_signal(M_sel_mux_wdsel_signal),
    .asel_out(M_sel_mux_asel_out),
    .bsel_out(M_sel_mux_bsel_out),
    .wdsel_out(M_sel_mux_wdsel_out)
  );
  
  reg [3:0] M_ra_d, M_ra_q = 1'h0;
  
  reg [3:0] M_rb_d, M_rb_q = 1'h0;
  
  reg [1:0] M_asel_d, M_asel_q = 1'h0;
  
  reg [2:0] M_bsel_d, M_bsel_q = 1'h0;
  
  reg [1:0] M_wdsel_d, M_wdsel_q = 1'h0;
  
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  
  
  localparam IDLE_man_states = 3'd0;
  localparam WAITRA_man_states = 3'd1;
  localparam WAITRB_man_states = 3'd2;
  localparam WAITALUFN_man_states = 3'd3;
  localparam WAITASEL_man_states = 3'd4;
  localparam WAITBSEL_man_states = 3'd5;
  localparam WAITWDSEL_man_states = 3'd6;
  localparam CHECKOUT_man_states = 3'd7;
  
  reg [2:0] M_man_states_d, M_man_states_q = IDLE_man_states;
  
  always @* begin
    M_man_states_d = M_man_states_q;
    M_rb_d = M_rb_q;
    M_wdsel_d = M_wdsel_q;
    M_asel_d = M_asel_q;
    M_bsel_d = M_bsel_q;
    M_alufn_d = M_alufn_q;
    M_ra_d = M_ra_q;
    
    M_regfile_ra = 4'h0;
    M_regfile_rb = 4'h0;
    M_regfile_rc = 4'h0;
    M_regfile_we = 1'h0;
    M_regfile_wr_data = 1'h0;
    M_sel_mux_asel_signal = 2'h0;
    M_sel_mux_bsel_signal = 3'h0;
    M_sel_mux_wdsel_signal = 2'h0;
    M_sel_mux_ra_data = M_regfile_ra_data;
    M_sel_mux_rb_data = M_regfile_rb_data;
    M_alu16_a = M_sel_mux_asel_out;
    M_alu16_b = M_sel_mux_bsel_out;
    M_alu16_alufn_signal = 6'h00;
    M_sel_mux_alu_data = M_alu16_out;
    out = 16'h0000;
    seg_out = 20'h001ca;
    
    case (M_man_states_q)
      IDLE_man_states: begin
        M_regfile_ra = 4'h0;
        M_regfile_rb = 4'h0;
        M_regfile_rc = 4'h0;
        M_regfile_we = 1'h0;
        M_regfile_wr_data = 1'h0;
        M_sel_mux_asel_signal = 2'h0;
        M_sel_mux_bsel_signal = 3'h0;
        M_sel_mux_wdsel_signal = 2'h0;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = 6'h00;
        M_sel_mux_alu_data = M_alu16_out;
        out = 16'h0000;
        seg_out = 20'h001ca;
        if (trigger_start == 1'h1) begin
          M_man_states_d = WAITRA_man_states;
        end
      end
      WAITRA_man_states: begin
        out = dips;
        seg_out = 20'h0000a;
        if (trigger_start == 1'h1) begin
          M_ra_d = dips[0+3-:4];
          M_man_states_d = WAITRB_man_states;
        end
      end
      WAITRB_man_states: begin
        out = dips;
        seg_out = 20'h0000b;
        if (trigger_start == 1'h1) begin
          M_rb_d = dips[0+3-:4];
          M_man_states_d = WAITALUFN_man_states;
        end
      end
      WAITALUFN_man_states: begin
        out = dips;
        seg_out = 20'h0000b;
        if (trigger_start == 1'h1) begin
          M_alufn_d = dips[0+5-:6];
          M_man_states_d = WAITASEL_man_states;
        end
      end
      WAITASEL_man_states: begin
        out = dips;
        seg_out = 20'h0000d;
        if (trigger_start == 1'h1) begin
          M_asel_d = dips[0+1-:2];
          M_man_states_d = WAITBSEL_man_states;
        end
      end
      WAITBSEL_man_states: begin
        out = dips;
        seg_out = 20'h0000e;
        if (trigger_start == 1'h1) begin
          M_bsel_d = dips[0+2-:3];
          M_man_states_d = WAITWDSEL_man_states;
        end
      end
      WAITWDSEL_man_states: begin
        out = dips;
        seg_out = 20'h0000f;
        if (trigger_start == 1'h1) begin
          M_wdsel_d = dips[0+1-:2];
          M_man_states_d = CHECKOUT_man_states;
        end
      end
      CHECKOUT_man_states: begin
        seg_out = 20'h8864e;
        M_regfile_ra = M_ra_q;
        M_regfile_rb = M_rb_q;
        M_sel_mux_asel_signal = M_asel_q;
        M_sel_mux_bsel_signal = M_bsel_q;
        M_sel_mux_wdsel_signal = M_wdsel_q;
        M_sel_mux_ra_data = M_regfile_ra_data;
        M_sel_mux_rb_data = M_regfile_rb_data;
        M_alu16_a = M_sel_mux_asel_out;
        M_alu16_b = M_sel_mux_bsel_out;
        M_alu16_alufn_signal = M_alufn_q;
        M_sel_mux_alu_data = M_alu16_out;
        
        case (dips)
          16'h0000: begin
            out = M_sel_mux_asel_out;
          end
          16'h0001: begin
            out = M_sel_mux_bsel_out;
          end
          16'h0002: begin
            out = M_sel_mux_wdsel_out;
          end
          16'h0003: begin
            out = M_alu16_out;
          end
        endcase
        if (trigger_start == 1'h1) begin
          M_man_states_d = IDLE_man_states;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_asel_q <= 1'h0;
    end else begin
      M_asel_q <= M_asel_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_bsel_q <= 1'h0;
    end else begin
      M_bsel_q <= M_bsel_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_man_states_q <= 1'h0;
    end else begin
      M_man_states_q <= M_man_states_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_wdsel_q <= 1'h0;
    end else begin
      M_wdsel_q <= M_wdsel_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ra_q <= 1'h0;
    end else begin
      M_ra_q <= M_ra_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufn_q <= 1'h0;
    end else begin
      M_alufn_q <= M_alufn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_rb_q <= 1'h0;
    end else begin
      M_rb_q <= M_rb_d;
    end
  end
  
endmodule
