module regfile_2_debug (
    input clk,           // clock
    input rst,           // reset
    input ra[4],         // hex address of ra
    input rb[4],         // hex address of rb
    input rc[4],         // hex address of rc
    input we,            // write signal
    input wr_data[16],   // data to write to register
    output ra_data[16],  // data in ra
    output rb_data[16],  // data in rb
    output data[16],     // DEBUG ONLY FROM HERE ON <- remove in final project
    output ra_addr[4],
    output rb_addr[4],
    output rc_addr[4],
    output rc_data[16],
    output we_signal[1], output debug__ [64]
   
  ) {
  
  // CHANGE DEFAULT VALUES IN #INIT(_) 
  dff reg_current_position[16](#INIT(0), .clk(clk), .rst(rst));
  dff reg_current_colour[16](#INIT(0), .clk(clk), .rst(rst));
  dff reg_current_guess_count[16](#INIT(7), .clk(clk), .rst(rst));
  dff reg_game_mode[16](#INIT(0),.clk(clk), .rst(rst));
  dff reg_code[16](#INIT(17921), .clk(clk), .rst(rst));
  dff reg_code_helper[16](#INIT(61440), .clk(clk), .rst(rst));
  dff reg_guess[16](#INIT(5760), .clk(clk), .rst(rst));
  dff reg_guess_helper[16](#INIT(61440), .clk(clk), .rst(rst));
  dff reg_hint[16](#INIT(0), .clk(clk), .rst(rst));
  dff reg_temp_code[16](#INIT(0), .clk(clk), .rst(rst));
  dff reg_temp_guess[16](#INIT(0), .clk(clk), .rst(rst));
  dff reg_temp_counter[16](#INIT(1), .clk(clk), .rst(rst));
  dff reg_imposter[16](#INIT(3),.clk(clk), .rst(rst));
  dff reg_error[16](#INIT(0), .clk(clk), .rst(rst));
  dff reg_temp[16](#INIT(0), .clk(clk), .rst(rst));    
  
  always {
  
    ra_data = 16b0;
    rb_data = 16b0;
    data = 16b0;
    ra_addr = 4b0;
    rb_addr = 4b0;
    rc_addr = 4b0;
    rc_data = 16b0;
    
    if (we) {
      case (rc) {
        4h1: reg_current_position.d = wr_data;
        4h2: reg_current_colour.d = wr_data;
        4h3: reg_current_guess_count.d = wr_data;
        4h4: reg_game_mode.d = wr_data;
        4h5: reg_code.d = wr_data;
        4h6: reg_code_helper.d = wr_data;
        4h7: reg_guess.d = wr_data;
        4h8: reg_guess_helper.d = wr_data;
        4h9: reg_hint.d = wr_data;
        4hA: reg_temp_code.d = wr_data;
        4hB: reg_temp_guess.d = wr_data;
        4hC: reg_temp_counter.d = wr_data;
        4hD: reg_imposter.d = wr_data;
        4hE: reg_error.d = wr_data;
        4hF: reg_temp.d = wr_data;
      }
    }
    
    case (ra) {
      4h1: ra_data = reg_current_position.q;
      4h2: ra_data = reg_current_colour.q;
      4h3: ra_data = reg_current_guess_count.q;
      4h4: ra_data = reg_game_mode.q;
      4h5: ra_data = reg_code.q;
      4h6: ra_data = reg_code_helper.q;
      4h7: ra_data = reg_guess.q;
      4h8: ra_data = reg_guess_helper.q;
      4h9: ra_data = reg_hint.q;
      4hA: ra_data = reg_temp_code.q;
      4hB: ra_data = reg_temp_guess.q;
      4hC: ra_data = reg_temp_counter.q;
      4hD: ra_data = reg_imposter.q;
      4hE: ra_data = reg_error.q;
      4hF: ra_data = reg_temp.q;
      default: ra_data = 16b0;
    }
    
    case (rb) {
      4h1: rb_data = reg_current_position.q;
      4h2: rb_data = reg_current_colour.q;
      4h3: rb_data = reg_current_guess_count.q;
      4h4: rb_data = reg_game_mode.q;
      4h5: rb_data = reg_code.q;
      4h6: rb_data = reg_code_helper.q;
      4h7: rb_data = reg_guess.q;
      4h8: rb_data = reg_guess_helper.q;
      4h9: rb_data = reg_hint.q;
      4hA: rb_data = reg_temp_code.q;
      4hB: rb_data = reg_temp_guess.q;
      4hC: rb_data = reg_temp_counter.q;
      4hD: rb_data = reg_imposter.q;
      4hE: rb_data = reg_error.q;
      4hF: rb_data = reg_temp.q;
      default: rb_data = 16b0;
    }
    
    // DEBUG VALUES <- remove in final project
    data = wr_data;
    ra_addr = ra;
    rb_addr = rb;
    rc_addr = rc;
    we_signal = we;
    case (rc) {
      4h1: rc_data = reg_current_position.q;
      4h2: rc_data = reg_current_colour.q;
      4h3: rc_data = reg_current_guess_count.q;
      4h4: rc_data = reg_game_mode.q;
      4h5: rc_data = reg_code.q;
      4h6: rc_data = reg_code_helper.q;
      4h7: rc_data = reg_guess.q;
      4h8: rc_data = reg_guess_helper.q;
      4h9: rc_data = reg_hint.q;
      4hA: rc_data = reg_temp_code.q;
      4hB: rc_data = reg_temp_guess.q;
      4hC: rc_data = reg_temp_counter.q;
      4hD: rc_data = reg_imposter.q;
      4hE: rc_data = reg_error.q;
      4hF: rc_data = reg_temp.q;
      default: rc_data = 16b0;
    }
  }
always debug__ = c{$flatten(reg_current_position.q), $flatten(reg_current_colour.q), $flatten(reg_guess.q), $flatten(reg_temp.q)};
}