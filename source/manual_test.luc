module manual_test (
    input clk,  // clock
    input rst,  // reset
    input dips[16], // dip switches
    input trigger_start,
    output out[16],
    output out_z[1],
    output out_v[1],
    output out_n[1],
    output seg_out[4][4]
  ) {
  
  // STEP 1: Declare my components
  alu alu16 (.rst(rst));
  
  // STEP 2: Setup values register and fsm
  dff a[16](#INIT(0), .clk(clk), .rst(rst));
  dff b[16](#INIT(0), .clk(clk), .rst(rst));
  dff op[6](#INIT(0), .clk(clk), .rst(rst));
  fsm man_states (.clk(clk), .rst(rst)) = {IDLE, WAITA, WAITB, WAITOP, CHECKALU}; 
  
  always {
    alu16.a = 16b0;
    alu16.b = 16b0;
    alu16.alufn_signal = 6b0;
    out = 16h0000;
    out_z = b0;
    out_v = b0;
    out_n = b0;
    seg_out = {4d0, 4d0, 4d0, 4d13};
    
    case (man_states.q) {
      man_states.IDLE:
        
        // When looping back from the last state (CHECKALU), reset everything
        alu16.a = 16b0;
        alu16.b = 16b0;
        alu16.alufn_signal = 6b0;
        out = 16h0000;
        out_z = b0;
        out_v = b0;
        out_n = b0;
        seg_out = {4d0, 4d0, 4d0, 4d13};
        a.d = 16b0;
        b.d = 16b0;
        op.d = 6b0;
        
        if (trigger_start == b1) {
          man_states.d = man_states.WAITA;
        }
        
      man_states.WAITA:
        out = dips;
        seg_out = {4d0, 4d0, 4d0, 4d1};
        if (trigger_start == b1) {
          a.d = dips;
          man_states.d = man_states.WAITB;
        }
       
      man_states.WAITB:
        out = dips;
        seg_out = {4d0, 4d0, 4d0, 4d2};
        if (trigger_start == b1) {
          b.d = dips;
          man_states.d = man_states.WAITOP;
        }
        
      man_states.WAITOP:
        out = dips;
        seg_out = {4d0, 4d0, 4d0, 4d3};
        if (trigger_start == b1) {
          op.d = dips[5:0];
          man_states.d = man_states.CHECKALU;
        }
        
      man_states.CHECKALU:
        seg_out = {4d15, 4d11, 4d14, 4d14};
        alu16.a = a.q;
        alu16.b = b.q;
        alu16.alufn_signal = op.q;
        out = alu16.out;
        out_z = alu16.zvn[2];
        out_v = alu16.zvn[1];
        out_n = alu16.zvn[0];
        if (trigger_start == b1) {
          man_states.d = man_states.IDLE;
        }
  }
}