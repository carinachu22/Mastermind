module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig switch_state;         // state signal from auto to
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond;
    edge_detector buttondetector(#RISE(1), #FALL(0));
    
    button_conditioner startcond;
    edge_detector startdetector(#RISE(1), #FALL(0));
    
    .rst(rst) {
      auto_test mult_auto;
      //manual_test mult_man;
      
      //multi_seven_seg seg;
      fsm test_mode = {MANUAL, AUTOMATIC};
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    buttoncond.in = io_button[0];
    buttondetector.in = buttoncond.out;
    switch_state = buttondetector.out;
    
    startcond.in = io_button[1];
    startdetector.in = startcond.out;
    mult_auto.trigger_start = startdetector.out;
    
    case (test_mode.q) {
      test_mode.MANUAL:
        if (switch_state) {
          test_mode.d = test_mode.AUTOMATIC;
        }
        else {
          // not sure how to do manual test mode fsm states yet
        }
      
      test_mode.AUTOMATIC:
        io_led[1] = mult_auto.out[15:8]; // show last 8 bits of result
        io_led[0] = mult_auto.out[7:0]; // show first 8 bits of result
        io_led[2][7] = mult_auto.err_flag; // most left LED light up if error
        io_led[2][1:0] = mult_auto.current; // first 2 leds from right will light up if complete
    }
  }
}