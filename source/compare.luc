module compare (
    input z,  
    input n,  
    input v,
    input alufn_signal[6],
    output cmp[16]  // 16 bits in the memory... right?
  ) {
  
  always {
    
    case(alufn_signal[2:1]) {
    
      default:
      cmp[0] = b0;
        
      b10:          // if alufn[2:1] == 10 ---> compare less than
      cmp[0] = n ^ v;  // less than is equivalent to n XOR v
        
      b01:      // if alufn[2:1] == 01 --> compare equal to
      cmp[0] = z;  // equal to is equivalent to z
        
      b11:              // if alufn[2:1] == 11 --> compare less than or equal to
      cmp[0] = z | n ^ v;  // less than or equal to is equivalent to z OR ( n XOR v )
    
      }
    
    cmp[15:1] = b0;
  
  }

}
