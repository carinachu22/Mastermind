module autotest_rom_answers(
    input address[6],
   // output add_answers[60],
   // output mult_answers[60],
    output answers[60]
    //output bool_answers[60],
    //output shift_answers[60],
    //output cmp_answers[60]

    // answer[59:44] is a[16]
    // answer[43:28] is b[16]
    
    // answer [27:20] is alufn[8] 
    // ^ NOTE to represent alufn  in hex, thats why its 8 bits. eg if alufn is b000001 -> h1
    
    // answer [19:4] is output [16]
    // answer [3:0] is zvn[3] 
    // ^ NOTE to represent zvn in hex, thats why its 4 bits. example if z, v, n ==1 -> b0111 ->h7
) 
{
    // 8 Test cases
    const TESTADD1 = 60h000100010000020; // 1+ 1 = 2
    const TESTADD2 = 60h0000FFFF00FFFF1; // 0+(-1) = 0   
    const TESTADD3 = 60h7FFF00010080003; // 7FFF + 0001 = 0000, positive overflow -> OFOO
    const TESTADD4 = 60h800080000000006; // works 8000 + 8000 = 0000, negative overflow -> OFOO
    const TESTSUB5 = 60h000100010100004; // pass
    const TESTSUB6 = 60hFFFF000001FFFF1; // pass
    const TESTSUB7 = 60h80007FFF0100013; // -ve overflowOFOO 0000 - FFFF = 
    const TESTSUB8 = 60h7FFF800001FFFF3; // +ve overflow OFOO 8000 - 7000 = 1000
    
    // Multiplier test cases
    const TESTMULT9 = 60h000000010200004; // 0 * pos
    const TESTMULT10 = 60hFFFFFFFF0200010; // neg * neg
    const TESTMULT11 = 60h000100010200010; // pos * pos
    const TESTMULT12 = 60h0001FFFF02FFFF1; // pos * neg
    const TESTMULT13 = 60h7FFF7FFF0200012; // +ve overflow (pos*pos)
    const TESTMULT14 = 60h000280000200006;  // -ve overflow (pos*neg)
    //const TESTDIV15 = 60h7FFF0001037FFF0; // pos / pos 
    //const TESTDIV16 = 60h7FFF00000300000; // pos / 0 -> zero error!
  
    // Boolean Test cases 
    // BOOL test cases
    const TESTBOOLAND15 = 60h000000001800004;
    const TESTBOOLAND16 = 60h000000011800004;
    const TESTBOOLAND17 = 60h000100011800010;
    const TESTBOOLOR18 = 60h000000001E00004;
    const TESTBOOLOR19 = 60h000000011E00010;
    const TESTBOOLOR20 = 60h000100011E00010;
    const TESTBOOLXOR21 = 60h000000001600004;
    const TESTBOOLXOR22 = 60h000000011600010;
    const TESTBOOLXOR23 = 60h000100011600004;
    const TESTBOOLA24 = 60h000000001A00004;
    const TESTBOOLA25 = 60h000000011A00004;
    const TESTBOOLA26 = 60h000100001A00010;
    const TESTBOOLA27 = 60h000100011A00010;
  
    //const TESTBOOL = {TESTBOOLA13, TESTBOOLA12, TESTBOOLA11, TESTBOOLA10, TESTBOOLXOR9, TESTBOOLXOR8, TESTBOOLXOR7, TESTBOOLOR6, TESTBOOLOR5, TESTBOOLOR4,TESTBOOLAND3, TESTBOOLAND2, TESTBOOLAND1};
    
    // Compare test cases
    const TESTCMP28 = 60h001000073500004;
    const TESTCMP29 = 60h0007000F3500010;
    const TESTCMP30 = 60h001000143700010;
    const TESTCMP31 = 60h001000103700010;
    const TESTCMP32 = 60h001500043700004;
    const TESTCMP33 = 60h000F000F3300010;
    const TESTCMP34 = 60h000400103300004;
  
    //const TESTCMP = {TESTCMP34, TESTCMP33,TESTCMP32, TESTCMP31, TESTCMP30, TESTCMP29, TESTCMP28};
  
    // SHIFT test cases 
    const TESTSHIFTLEFT35 = 60h000200022000080;
    const TESTSHIFTLEFT36 = 60h000200042000200;
    const TESTSHIFTLEFT37 = 60h000200072001000;
    const TESTSHIFTRIGHT38 = 60h004000022100100;
    const TESTSHIFTRIGHT39 = 60h004000042100040;
    const TESTSHIFTRIGHT40 = 60h004000072100000;
    const TESTSHIFTRIGHTSIGNED41 = 60h8040000223E0100;
    const TESTSHIFTRIGHTSIGNED42 = 60h8040000423F8040;
    const TESTSHIFTRIGHTSIGNED43 = 60h8040000723FF000;
  
    const TESTSHIFT = {TESTSHIFTRIGHTSIGNED43,TESTSHIFTRIGHTSIGNED42,TESTSHIFTRIGHTSIGNED41,
                        TESTSHIFTRIGHT40, TESTSHIFTRIGHT39, TESTSHIFTRIGHT38, 
                        TESTSHIFTLEFT37, TESTSHIFTLEFT36,TESTSHIFTLEFT35};
  
  
    const TESTS = {TESTSHIFTRIGHTSIGNED43,TESTSHIFTRIGHTSIGNED42,TESTSHIFTRIGHTSIGNED41,
                   TESTSHIFTRIGHT40, TESTSHIFTRIGHT39, TESTSHIFTRIGHT38, 
                   TESTSHIFTLEFT37, TESTSHIFTLEFT36,TESTSHIFTLEFT35,
                  TESTCMP34, TESTCMP33,TESTCMP32, TESTCMP31, TESTCMP30, TESTCMP29, TESTCMP28,TESTBOOLA27, TESTBOOLA26, TESTBOOLA25, TESTBOOLA24, TESTBOOLXOR23, TESTBOOLXOR22, TESTBOOLXOR21, 
                  TESTBOOLOR20, TESTBOOLOR19, TESTBOOLOR18, TESTBOOLAND17, TESTBOOLAND16, TESTBOOLAND15, 
                  TESTMULT14,TESTMULT13,TESTMULT12,TESTMULT11,TESTMULT10,TESTMULT9,
                  TESTSUB8,TESTSUB7,TESTSUB6,TESTSUB5,TESTADD4, TESTADD3,TESTADD2, TESTADD1};
    //const TESTADD = {TESTSUB8, TESTSUB7, TESTSUB6,TESTSUB5,TESTADD4,TESTADD3,TESTADD2,TESTADD1};
    //const TESTMULT = {TESTDIV2, TESTDIV1, TESTMULT6,TESTMULT5,TESTMULT4,TESTMULT3,TESTMULT2,TESTMULT1};
    
  
    always{
        //add_answers = TESTADD[address];
        //mult_answers = TESTMULT[address];
        answers = TESTS[address];
        
        //bool_answers = TESTBOOl[address];
        //shift_answers = TESTSHIFT[address];
        //cmp_answers = TESTCMP[address];
  }
}
