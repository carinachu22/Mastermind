/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module manual_test_5 (
    input clk,
    input rst,
    input [15:0] dips,
    input trigger_start,
    output reg [15:0] out,
    output reg [0:0] out_z,
    output reg [0:0] out_v,
    output reg [0:0] out_n,
    output reg [15:0] seg_out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_div_err;
  wire [3-1:0] M_alu16_zvn;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_8 alu16 (
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .div_err(M_alu16_div_err),
    .zvn(M_alu16_zvn)
  );
  
  reg [15:0] M_a_d, M_a_q = 1'h0;
  
  reg [15:0] M_b_d, M_b_q = 1'h0;
  
  reg [5:0] M_op_d, M_op_q = 1'h0;
  
  
  localparam IDLE_man_states = 3'd0;
  localparam WAITA_man_states = 3'd1;
  localparam WAITB_man_states = 3'd2;
  localparam WAITOP_man_states = 3'd3;
  localparam CHECKALU_man_states = 3'd4;
  
  reg [2:0] M_man_states_d, M_man_states_q = IDLE_man_states;
  
  always @* begin
    M_man_states_d = M_man_states_q;
    M_a_d = M_a_q;
    M_op_d = M_op_q;
    M_b_d = M_b_q;
    
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    M_alu16_alufn_signal = 6'h00;
    out = 16'h0000;
    out_z = 1'h0;
    out_v = 1'h0;
    out_n = 1'h0;
    seg_out = 16'h000d;
    
    case (M_man_states_q)
      IDLE_man_states: begin
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        M_alu16_alufn_signal = 6'h00;
        out = 16'h0000;
        out_z = 1'h0;
        out_v = 1'h0;
        out_n = 1'h0;
        seg_out = 16'h000d;
        M_a_d = 16'h0000;
        M_b_d = 16'h0000;
        M_op_d = 6'h00;
        if (trigger_start == 1'h1) begin
          M_man_states_d = WAITA_man_states;
        end
      end
      WAITA_man_states: begin
        out = dips;
        seg_out = 16'h0001;
        if (trigger_start == 1'h1) begin
          M_a_d = dips;
          M_man_states_d = WAITB_man_states;
        end
      end
      WAITB_man_states: begin
        out = dips;
        seg_out = 16'h0002;
        if (trigger_start == 1'h1) begin
          M_b_d = dips;
          M_man_states_d = WAITOP_man_states;
        end
      end
      WAITOP_man_states: begin
        out = dips;
        seg_out = 16'h0003;
        if (trigger_start == 1'h1) begin
          M_op_d = dips[0+5-:6];
          M_man_states_d = CHECKALU_man_states;
        end
      end
      CHECKALU_man_states: begin
        seg_out = 16'hfbee;
        M_alu16_a = M_a_q;
        M_alu16_b = M_b_q;
        M_alu16_alufn_signal = M_op_q;
        out = M_alu16_out;
        out_z = M_alu16_zvn[2+0-:1];
        out_v = M_alu16_zvn[1+0-:1];
        out_n = M_alu16_zvn[0+0-:1];
        if (trigger_start == 1'h1) begin
          M_man_states_d = IDLE_man_states;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_op_q <= 1'h0;
    end else begin
      M_op_q <= M_op_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_b_q <= 1'h0;
    end else begin
      M_b_q <= M_b_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_man_states_q <= 1'h0;
    end else begin
      M_man_states_q <= M_man_states_d;
    end
  end
  
endmodule
