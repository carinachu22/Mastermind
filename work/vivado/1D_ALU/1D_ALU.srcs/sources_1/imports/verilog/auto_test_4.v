/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_test_4 (
    input clk,
    input rst,
    input trigger_start,
    input [7:0] err_dip,
    output reg [15:0] out,
    output reg [0:0] out_z,
    output reg [0:0] out_v,
    output reg [0:0] out_n,
    output reg [19:0] seg_out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  reg [6-1:0] M_alu16_alufn_signal;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_8 alu16 (
    .clk(clk),
    .rst(rst),
    .alufn_signal(M_alu16_alufn_signal),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n)
  );
  
  wire [16-1:0] M_mod_out;
  reg [8-1:0] M_mod_inv_input;
  reg [16-1:0] M_mod_alu_result;
  external_error_9 mod (
    .clk(clk),
    .rst(rst),
    .inv_input(M_mod_inv_input),
    .alu_result(M_mod_alu_result),
    .out(M_mod_out)
  );
  
  wire [1-1:0] M_slow_clock_value;
  counter_10 slow_clock (
    .clk(clk),
    .rst(rst),
    .value(M_slow_clock_value)
  );
  
  wire [1-1:0] M_slow_edge_out;
  reg [1-1:0] M_slow_edge_in;
  edge_detector_3 slow_edge (
    .clk(clk),
    .in(M_slow_edge_in),
    .out(M_slow_edge_out)
  );
  
  reg [3:0] M_test_cases_d, M_test_cases_q = 1'h0;
  
  
  localparam IDLE_test_states = 3'd0;
  localparam START_test_states = 3'd1;
  localparam PASS_test_states = 3'd2;
  localparam ERROR_test_states = 3'd3;
  localparam FINISH_test_states = 3'd4;
  
  reg [2:0] M_test_states_d, M_test_states_q = IDLE_test_states;
  
  always @* begin
    M_test_states_d = M_test_states_q;
    M_test_cases_d = M_test_cases_q;
    
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    M_alu16_alufn_signal = 6'h00;
    out = 16'hffff;
    out_z = 1'h0;
    out_v = 1'h0;
    out_n = 1'h0;
    seg_out = 20'hfffeb;
    M_mod_inv_input = err_dip;
    M_mod_alu_result = M_alu16_out;
    M_slow_edge_in = M_slow_clock_value;
    
    case (M_test_states_q)
      IDLE_test_states: begin
        if (trigger_start == 1'h1) begin
          M_test_cases_d = 1'h0;
          M_test_states_d = START_test_states;
        end
      end
      START_test_states: begin
        
        case (M_test_cases_q)
          1'h0: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'h0000;
            M_alu16_b = 16'h0000;
            seg_out = 20'hfffe1;
            if (M_mod_out != 16'h0000 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          1'h1: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'h0001;
            M_alu16_b = 16'h0001;
            seg_out = 20'hfffe2;
            if (M_mod_out != 16'h0001 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          2'h2: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'hffff;
            M_alu16_b = 16'hffff;
            seg_out = 20'hfffe3;
            if (M_mod_out != 16'h0001 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          2'h3: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'h0000;
            M_alu16_b = 16'h0111;
            seg_out = 20'hfffe4;
            if (M_mod_out != 16'h0000 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          3'h4: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'h0001;
            M_alu16_b = 16'h0111;
            seg_out = 20'hfffe5;
            if (M_mod_out != 16'h0111 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          3'h5: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'hffff;
            M_alu16_b = 16'h0111;
            seg_out = 20'hfffe6;
            if (M_mod_out != 16'hfeef && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          3'h6: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'h0000;
            M_alu16_b = 16'hfeef;
            seg_out = 20'hfffe7;
            if (M_mod_out != 16'h0000 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          3'h7: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'h0001;
            M_alu16_b = 16'hfeef;
            seg_out = 20'hfffe8;
            if (M_mod_out != 16'hfeef && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          4'h8: begin
            M_alu16_alufn_signal = 6'h02;
            M_alu16_a = 16'hffff;
            M_alu16_b = 16'hfeef;
            seg_out = 20'hfffe9;
            if (M_mod_out != 16'h0111 && M_slow_edge_out) begin
              M_test_cases_d = M_test_cases_q + 1'h1;
              M_test_states_d = ERROR_test_states;
            end else begin
              if (M_slow_edge_out) begin
                M_test_cases_d = M_test_cases_q + 1'h1;
                M_test_states_d = PASS_test_states;
              end
            end
          end
          4'h9: begin
            M_test_states_d = FINISH_test_states;
          end
        endcase
        out = M_alu16_out;
        out_z = M_alu16_z;
        out_v = M_alu16_v;
        out_n = M_alu16_n;
      end
      PASS_test_states: begin
        out = 16'h0000;
        seg_out = 20'h7adce;
        if (M_slow_edge_out) begin
          M_test_states_d = START_test_states;
        end
      end
      ERROR_test_states: begin
        out = M_mod_out;
        seg_out = 20'h64200;
        if (M_slow_edge_out) begin
          M_test_states_d = START_test_states;
        end
      end
      FINISH_test_states: begin
        out = 16'h0000;
        seg_out = 20'h505cd;
        if (trigger_start) begin
          M_test_states_d = IDLE_test_states;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_test_cases_q <= 1'h0;
    end else begin
      M_test_cases_q <= M_test_cases_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_test_states_q <= 1'h0;
    end else begin
      M_test_states_q <= M_test_states_d;
    end
  end
  
endmodule
